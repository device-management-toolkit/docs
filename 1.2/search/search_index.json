{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Open Active Management Technology (Open AMT) Cloud Toolkit provides open-source, modular microservices and libraries for integration of Intel\u00ae Active Management Technology (Intel\u00ae AMT) . As an open source implementation, the toolkit makes it easier for IT departments and independent software vendors (ISVs) to adopt, integrate, and customize out-of-band (OOB) management solutions for Intel vPro\u00ae platforms . Figure 1: Open AMT Cloud Toolkit features out-of-band (OOB) management. Intel\u00ae AMT supports remote manageability with: OOB Management: This hardware-based remote management solution operates below the operating system. Call Home: This capability enables administrators to control, update, and modify remote clients with OOB Management. Goals \u00b6 The toolkit guide provides instructions to: Deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) on the development system. Build and run Remote Provisioning Client (RPC) on the managed device. Connect the managed device (edge device) Additional sections provide guidance on the reference implementation UI Toolkit, REST API usage, asset security, and more. Figure 2: High-level architecture consists of four major software components. As shown in Figure 2, Open AMT Cloud Toolkit high-level architecture consists of four components: MPS - A microservice that uses an Intel vPro\u00ae platform feature, Client Initiated Remote Access (CIRA), for enabling edge, cloud devices to maintain a persistent connection for out-of-band manageability features, such as power control or Keyboard, Video, Mouse (KVM) control. RPS - A microservice that activates Intel\u00ae AMT platforms using predefined profiles and connects them to the MPS for manageability use cases. RPC - A lightweight client application that communicates with the RPS server to activate Intel\u00ae AMT. UI Toolkit - A toolkit that includes prebuilt React components and a reference implementation web console. The React-based snippets simplify the task of adding complex manageability-related UI controls, such as the KVM, to a console. Sample Web UI - A web based UI that demonstrates how to use the UI-Toolkit. It also provides a way to interact with the microservices and to help provide context as to how each microservice is used. Integrate the Open AMT Cloud Toolkit into new and existing management consoles, software solutions, and more. Open AMT Cloud Toolkit Setup \u00b6 Build and Deploy Microservices Locally \u00b6 If unfamiliar with Docker*, choose this setup option to accomplish a manual, local installation of microservices. Get Started with Local Microservices Estimated completion time: Approximately 15 minutes Build and Deploy Microservices with Local Docker* Images \u00b6 If familiar with Docker, choose this setup option to install microservices as local Docker images. This option is an especially good choice for development systems with Docker already installed. Get Started with Microservices as Docker Images Estimated completion time: Approximately 15 minutes Both build-and-deploy options install microservices locally on a development system. The client application is installed on a managed device. Experienced Docker users may choose to deploy microservices straight to the cloud . Additional Intel\u00ae AMT Resources \u00b6 For additional information about Intel\u00ae AMT, see the following links: Intel vPro\u00ae Platform Overview Video Link Detailed Setup document","title":"Home"},{"location":"#overview","text":"Open Active Management Technology (Open AMT) Cloud Toolkit provides open-source, modular microservices and libraries for integration of Intel\u00ae Active Management Technology (Intel\u00ae AMT) . As an open source implementation, the toolkit makes it easier for IT departments and independent software vendors (ISVs) to adopt, integrate, and customize out-of-band (OOB) management solutions for Intel vPro\u00ae platforms . Figure 1: Open AMT Cloud Toolkit features out-of-band (OOB) management. Intel\u00ae AMT supports remote manageability with: OOB Management: This hardware-based remote management solution operates below the operating system. Call Home: This capability enables administrators to control, update, and modify remote clients with OOB Management.","title":"Overview"},{"location":"#goals","text":"The toolkit guide provides instructions to: Deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) on the development system. Build and run Remote Provisioning Client (RPC) on the managed device. Connect the managed device (edge device) Additional sections provide guidance on the reference implementation UI Toolkit, REST API usage, asset security, and more. Figure 2: High-level architecture consists of four major software components. As shown in Figure 2, Open AMT Cloud Toolkit high-level architecture consists of four components: MPS - A microservice that uses an Intel vPro\u00ae platform feature, Client Initiated Remote Access (CIRA), for enabling edge, cloud devices to maintain a persistent connection for out-of-band manageability features, such as power control or Keyboard, Video, Mouse (KVM) control. RPS - A microservice that activates Intel\u00ae AMT platforms using predefined profiles and connects them to the MPS for manageability use cases. RPC - A lightweight client application that communicates with the RPS server to activate Intel\u00ae AMT. UI Toolkit - A toolkit that includes prebuilt React components and a reference implementation web console. The React-based snippets simplify the task of adding complex manageability-related UI controls, such as the KVM, to a console. Sample Web UI - A web based UI that demonstrates how to use the UI-Toolkit. It also provides a way to interact with the microservices and to help provide context as to how each microservice is used. Integrate the Open AMT Cloud Toolkit into new and existing management consoles, software solutions, and more.","title":"Goals"},{"location":"#open-amt-cloud-toolkit-setup","text":"","title":"Open AMT Cloud Toolkit Setup"},{"location":"#build-and-deploy-microservices-locally","text":"If unfamiliar with Docker*, choose this setup option to accomplish a manual, local installation of microservices. Get Started with Local Microservices Estimated completion time: Approximately 15 minutes","title":"Build and Deploy Microservices Locally"},{"location":"#build-and-deploy-microservices-with-local-docker-images","text":"If familiar with Docker, choose this setup option to install microservices as local Docker images. This option is an especially good choice for development systems with Docker already installed. Get Started with Microservices as Docker Images Estimated completion time: Approximately 15 minutes Both build-and-deploy options install microservices locally on a development system. The client application is installed on a managed device. Experienced Docker users may choose to deploy microservices straight to the cloud .","title":"Build and Deploy Microservices with Local Docker* Images"},{"location":"#additional-intel-amt-resources","text":"For additional information about Intel\u00ae AMT, see the following links: Intel vPro\u00ae Platform Overview Video Link Detailed Setup document","title":"Additional Intel\u00ae AMT Resources"},{"location":"Glossary/","text":"Glossary \u00b6 Open Active Management Technology (Open AMT) Cloud Toolkit, also referred to as (OAMTCT) Related Terminology, Technologies, and Acronyms A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z A \u00b6 admin control mode (ACM): A mode of provisioning Intel\u00ae AMT that requires a purchased provisioning certificate from a Certificate Authority (CA), the creation of a domain, and the creation of a profile in the Remote Provisioning Server (RPS) application. ACM achieves a higher level of trust than client control mode (CCM). This is the required mode for Keyboard, Video, Mouse (KVM) or Redirection without user consent. See also CCM and provisioning . ACM Activation: The act of loading a purchased certificate and associating it with an OAMTCT profile. allowlist: A list permitting access to a privilege, service, network, etc. B \u00b6 Basic Input/Output System (BIOS): Firmware that performs hardware initialization and configuration upon startup. See MEBX . C \u00b6 certificate (provisioning): A digitally signed document used in the provisioning of an edge device featuring Intel\u00ae AMT. The Intel\u00ae AMT firmware is pre-loaded with Transport Layer Security (TLS) certificate thumbprints of different certificate vendors. A digital certificate binds the identity of the certificate holder to vendor-specific thumbprints. To provision an edge device, users must purchase a certificate from an approved vendor. Client Initiated Remote Access (CIRA): An out-of-band (OOB) management communication protocol that network clients can use to initiate a secure connection with a server. Client Control Mode (CCM): An alternative to ACM provisioning mode that does not require a purchased certificate. Use this mode to set up OAMTCT software features quickly. Container (Docker*): The instantiation, or running instance, of a Docker image. D \u00b6 development system: The system on which Management Presence Server (MPS) and Remote Provision Server (RPS) are installed. Docker*: A platform that employs the idea of containerization, isolating a unit of software, such as an application, from its environment. Containerization creates applications as lightweight, discrete processes that can be deployed to the cloud as services. See Docker for more information. Domain Name System (DNS) suffix: A suffix appended to the hostname of a DNS name. domain suffix: The top-level portion or end of a domain name (i.e., com, net, org). E \u00b6 Edge Devices: A device or piece of hardware that serves as an entry point into an enterprise or service provider network. Edge devices include those related to banking, retail, hospitality, point-of-sale, etc. G \u00b6 Globally Unique Identifier (GUID): A 128-bit integer used to identify a system resource. I \u00b6 Intel\u00ae Active Management Technology (Intel\u00ae AMT): A technology that provides out-of-band management and security features on an Intel vPro\u00ae platform. See general overview of features. Intel vPro\u00ae Platform: An Intel\u00ae platform created for business environments. Intel vPro\u00ae features Intel\u00ae Core\u2122 i5, Intel\u00ae Core\u2122 i7, and Intel\u00ae Core\u2122 i9 vPro\u00ae processors, built-in security features, and out-of-band manageability using Intel\u00ae AMT. See more about the platform. Images (Docker*): a set of instructions that determine the creation of an instantiated container on a Docker platform. K \u00b6 Keyboard, Video, Mouse (KVM): A technology, often a device, that allows a user to control multiple computers from a single keyboard, mouse, and video source. L \u00b6 lights-out management (LOM): See out-of-band management . M \u00b6 managed (edge) device: An Intel vPro\u00ae platform that features Intel\u00ae AMT and functions as an edge device. Manageability Engine BIOS Extensions (MEBX): A BIOS extension that enables the configuration of the Intel\u00ae AMT. Management Presence Server (MPS): A microservice that resides on the development system and enables platforms featuring featuring Intel\u00ae AMT. The MPS receives CIRA requests from the managed device. microservice: A software unit or module of a microservice architecture. In OAMTCT architecture, MPS and RPS are microservices residing on the development system. microservice architecture: An architecture in which the component parts are broken into discrete services, called microservices, that perform specific, limited functions. N \u00b6 Node.js*: An open source JavaScript* runtime created for asynchronous, event-driven backend network applications. See more about node.js. Node Package Manager (npm): a command line utility in node.js. The utility enables the management of packages, versions, and dependencies in node projects. O \u00b6 Open Active Management Technology (Open AMT) Cloud Toolkit: An open source software architecture consisting of modular microservices and libraries for integration of out-of-band manageability into existing network infrastructures. The software enables network administrators and independent software vendors (ISVs) to explore key Intel\u00ae AMT features. See more about Open AMT Cloud Toolkit features. out-of-band (OOB) manageability: A remote management technology that allows administrators to perform actions on network assets or devices using a secure alternative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, OAMTCT software can perform remote management, including powering up a system that is currently powered down. P \u00b6 profile : A set of configuration information, including a password and provisioning method, provided to Intel\u00ae AMT firmware during the activation process. provision or provisioning: The act of setting up a remote client, system, or device, on a network using a digitally signed certificate as a security credential. Q \u00b6 R \u00b6 Remote Provision Client (RPC): A lightweight client application that resides on the managed device. The RPC communicates with the Manageability Engine Interface (MEI) in the Management Engine (ME) driver to activate Intel AMT. Remote Provision Server (RPS): A node.js-based microservice that works with the Remote Provision Client (RPC) to activate Intel AMT using a pre-defined profile. REpresentational State Transfer (REST) API : An architectural style or set of rules describing constraints that allow administrators and developers to take advantage of various Web services. in the context of OAMTCT, administrators can construct REST API calls and run them with node, use provided REST code snippets to expand the reference implementation console, and use provided REST code snippets as a springboard for developing and expanding custom consoles. S \u00b6 Sample Web UI: A reference UI implementation serving as a demo vehicle and utilizing components of the UI toolkit. T \u00b6 U \u00b6 UI Toolkit: A modular, REST-based API consisting of code snippets developers can use to implement AMT features and services to their manageability console. V \u00b6 vcpkg : A command-line application that helps manage package creation and C and C++ libraries on Windows , Linux , and MacOS*. Vault storage : A service that manages encryption and storage of infrastructure secrets. W \u00b6 WebSocket*: A communication protocol that enables persistent connections and full-duplex communication between clients and servers. Web Service Management (WS-MAN): A SOAP-based protocol for exchanging management data between network devices. X \u00b6 Y \u00b6 Z \u00b6","title":"Glossary"},{"location":"Glossary/#glossary","text":"Open Active Management Technology (Open AMT) Cloud Toolkit, also referred to as (OAMTCT) Related Terminology, Technologies, and Acronyms A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z","title":"Glossary"},{"location":"Glossary/#a","text":"admin control mode (ACM): A mode of provisioning Intel\u00ae AMT that requires a purchased provisioning certificate from a Certificate Authority (CA), the creation of a domain, and the creation of a profile in the Remote Provisioning Server (RPS) application. ACM achieves a higher level of trust than client control mode (CCM). This is the required mode for Keyboard, Video, Mouse (KVM) or Redirection without user consent. See also CCM and provisioning . ACM Activation: The act of loading a purchased certificate and associating it with an OAMTCT profile. allowlist: A list permitting access to a privilege, service, network, etc.","title":"A"},{"location":"Glossary/#b","text":"Basic Input/Output System (BIOS): Firmware that performs hardware initialization and configuration upon startup. See MEBX .","title":"B"},{"location":"Glossary/#c","text":"certificate (provisioning): A digitally signed document used in the provisioning of an edge device featuring Intel\u00ae AMT. The Intel\u00ae AMT firmware is pre-loaded with Transport Layer Security (TLS) certificate thumbprints of different certificate vendors. A digital certificate binds the identity of the certificate holder to vendor-specific thumbprints. To provision an edge device, users must purchase a certificate from an approved vendor. Client Initiated Remote Access (CIRA): An out-of-band (OOB) management communication protocol that network clients can use to initiate a secure connection with a server. Client Control Mode (CCM): An alternative to ACM provisioning mode that does not require a purchased certificate. Use this mode to set up OAMTCT software features quickly. Container (Docker*): The instantiation, or running instance, of a Docker image.","title":"C"},{"location":"Glossary/#d","text":"development system: The system on which Management Presence Server (MPS) and Remote Provision Server (RPS) are installed. Docker*: A platform that employs the idea of containerization, isolating a unit of software, such as an application, from its environment. Containerization creates applications as lightweight, discrete processes that can be deployed to the cloud as services. See Docker for more information. Domain Name System (DNS) suffix: A suffix appended to the hostname of a DNS name. domain suffix: The top-level portion or end of a domain name (i.e., com, net, org).","title":"D"},{"location":"Glossary/#e","text":"Edge Devices: A device or piece of hardware that serves as an entry point into an enterprise or service provider network. Edge devices include those related to banking, retail, hospitality, point-of-sale, etc.","title":"E"},{"location":"Glossary/#g","text":"Globally Unique Identifier (GUID): A 128-bit integer used to identify a system resource.","title":"G"},{"location":"Glossary/#i","text":"Intel\u00ae Active Management Technology (Intel\u00ae AMT): A technology that provides out-of-band management and security features on an Intel vPro\u00ae platform. See general overview of features. Intel vPro\u00ae Platform: An Intel\u00ae platform created for business environments. Intel vPro\u00ae features Intel\u00ae Core\u2122 i5, Intel\u00ae Core\u2122 i7, and Intel\u00ae Core\u2122 i9 vPro\u00ae processors, built-in security features, and out-of-band manageability using Intel\u00ae AMT. See more about the platform. Images (Docker*): a set of instructions that determine the creation of an instantiated container on a Docker platform.","title":"I"},{"location":"Glossary/#k","text":"Keyboard, Video, Mouse (KVM): A technology, often a device, that allows a user to control multiple computers from a single keyboard, mouse, and video source.","title":"K"},{"location":"Glossary/#l","text":"lights-out management (LOM): See out-of-band management .","title":"L"},{"location":"Glossary/#m","text":"managed (edge) device: An Intel vPro\u00ae platform that features Intel\u00ae AMT and functions as an edge device. Manageability Engine BIOS Extensions (MEBX): A BIOS extension that enables the configuration of the Intel\u00ae AMT. Management Presence Server (MPS): A microservice that resides on the development system and enables platforms featuring featuring Intel\u00ae AMT. The MPS receives CIRA requests from the managed device. microservice: A software unit or module of a microservice architecture. In OAMTCT architecture, MPS and RPS are microservices residing on the development system. microservice architecture: An architecture in which the component parts are broken into discrete services, called microservices, that perform specific, limited functions.","title":"M"},{"location":"Glossary/#n","text":"Node.js*: An open source JavaScript* runtime created for asynchronous, event-driven backend network applications. See more about node.js. Node Package Manager (npm): a command line utility in node.js. The utility enables the management of packages, versions, and dependencies in node projects.","title":"N"},{"location":"Glossary/#o","text":"Open Active Management Technology (Open AMT) Cloud Toolkit: An open source software architecture consisting of modular microservices and libraries for integration of out-of-band manageability into existing network infrastructures. The software enables network administrators and independent software vendors (ISVs) to explore key Intel\u00ae AMT features. See more about Open AMT Cloud Toolkit features. out-of-band (OOB) manageability: A remote management technology that allows administrators to perform actions on network assets or devices using a secure alternative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, OAMTCT software can perform remote management, including powering up a system that is currently powered down.","title":"O"},{"location":"Glossary/#p","text":"profile : A set of configuration information, including a password and provisioning method, provided to Intel\u00ae AMT firmware during the activation process. provision or provisioning: The act of setting up a remote client, system, or device, on a network using a digitally signed certificate as a security credential.","title":"P"},{"location":"Glossary/#q","text":"","title":"Q"},{"location":"Glossary/#r","text":"Remote Provision Client (RPC): A lightweight client application that resides on the managed device. The RPC communicates with the Manageability Engine Interface (MEI) in the Management Engine (ME) driver to activate Intel AMT. Remote Provision Server (RPS): A node.js-based microservice that works with the Remote Provision Client (RPC) to activate Intel AMT using a pre-defined profile. REpresentational State Transfer (REST) API : An architectural style or set of rules describing constraints that allow administrators and developers to take advantage of various Web services. in the context of OAMTCT, administrators can construct REST API calls and run them with node, use provided REST code snippets to expand the reference implementation console, and use provided REST code snippets as a springboard for developing and expanding custom consoles.","title":"R"},{"location":"Glossary/#s","text":"Sample Web UI: A reference UI implementation serving as a demo vehicle and utilizing components of the UI toolkit.","title":"S"},{"location":"Glossary/#t","text":"","title":"T"},{"location":"Glossary/#u","text":"UI Toolkit: A modular, REST-based API consisting of code snippets developers can use to implement AMT features and services to their manageability console.","title":"U"},{"location":"Glossary/#v","text":"vcpkg : A command-line application that helps manage package creation and C and C++ libraries on Windows , Linux , and MacOS*. Vault storage : A service that manages encryption and storage of infrastructure secrets.","title":"V"},{"location":"Glossary/#w","text":"WebSocket*: A communication protocol that enables persistent connections and full-duplex communication between clients and servers. Web Service Management (WS-MAN): A SOAP-based protocol for exchanging management data between network devices.","title":"W"},{"location":"Glossary/#x","text":"","title":"X"},{"location":"Glossary/#y","text":"","title":"Y"},{"location":"Glossary/#z","text":"","title":"Z"},{"location":"letter/","text":"Hello Everyone! \u00b6 We are rapidly continuing down the path of improvement and are excited to announce the v1.2.0 release of the Open AMT Cloud Toolkit. We've got a few breaking changes in this release, so please read the release notes carefully to note what is breaking. We've greatly simplified the restful APIs on RPS. You'll now see that all error responses are properly structured JSON, the property names are consistent across request/response and the correct status codes are now being returned. This constitutes one of our biggest breaking changes, but felt it is the right direction and greatly simplifies integration. This release also brings an entirely revamped sample web ui based on Angular with a much more friendly User Experience to help guide you through the steps required to activate an AMT device (not to mention much easier on the eyes!). Additionally, the protocol version between RPC and RPS has been bumped to 4.0.0 to account for a delay that has been added in between provisioning and activation to help avoid a previous issue where a device would not connect to MPS without a power cycle. Lastly, we've added a Dockerfile for RPC to help enable better integration with edge management solutions such as Portainer, Azure IoT Edge, AWS Greengrass etc... (Linux Only though :( ) Be sure and check the documentation for how to use RPC in Docker. For scaling out MPS, we've released a preview with K8S. We know it's got some issues with KVM and SOL, and is currently locked to Azure (AKS) and can only be deployed from Windows. We will be addressing this in the future to be a bit more OS deployment agnostic as well as cloud agnostic. But for now, it is what we have and we ask you provide feedback to help us improve. While we are excited for 1.2, we know we still have some things we can improve on. For 1.3 we will be adding a proxy in front of the microservices to help alleviate dealing with accepting multiple self-signed certificates and knowing which port is which. The configuration will become simplified by leveraging .env files consistently across both a containerized deployment as well as a local deployment. MPS will begin to undergo the same restructuring as RPS -- having some APIs that make a bit more sense then just /admin and become easier to integrate. Lastly, we will be removing the \"dev mode\" concept. This will require you to have both a PostgreSQL and Vault instance running, but Docker will help make this easy! As always, if any issues are found -- please file them on our github issues and we'll be sure to take a look and address them as we can. Thanks again for your continued patience as we continue to improve the Open AMT Cloud toolkit. - Mike","title":"Letter From The Devs"},{"location":"letter/#hello-everyone","text":"We are rapidly continuing down the path of improvement and are excited to announce the v1.2.0 release of the Open AMT Cloud Toolkit. We've got a few breaking changes in this release, so please read the release notes carefully to note what is breaking. We've greatly simplified the restful APIs on RPS. You'll now see that all error responses are properly structured JSON, the property names are consistent across request/response and the correct status codes are now being returned. This constitutes one of our biggest breaking changes, but felt it is the right direction and greatly simplifies integration. This release also brings an entirely revamped sample web ui based on Angular with a much more friendly User Experience to help guide you through the steps required to activate an AMT device (not to mention much easier on the eyes!). Additionally, the protocol version between RPC and RPS has been bumped to 4.0.0 to account for a delay that has been added in between provisioning and activation to help avoid a previous issue where a device would not connect to MPS without a power cycle. Lastly, we've added a Dockerfile for RPC to help enable better integration with edge management solutions such as Portainer, Azure IoT Edge, AWS Greengrass etc... (Linux Only though :( ) Be sure and check the documentation for how to use RPC in Docker. For scaling out MPS, we've released a preview with K8S. We know it's got some issues with KVM and SOL, and is currently locked to Azure (AKS) and can only be deployed from Windows. We will be addressing this in the future to be a bit more OS deployment agnostic as well as cloud agnostic. But for now, it is what we have and we ask you provide feedback to help us improve. While we are excited for 1.2, we know we still have some things we can improve on. For 1.3 we will be adding a proxy in front of the microservices to help alleviate dealing with accepting multiple self-signed certificates and knowing which port is which. The configuration will become simplified by leveraging .env files consistently across both a containerized deployment as well as a local deployment. MPS will begin to undergo the same restructuring as RPS -- having some APIs that make a bit more sense then just /admin and become easier to integrate. Lastly, we will be removing the \"dev mode\" concept. This will require you to have both a PostgreSQL and Vault instance running, but Docker will help make this easy! As always, if any issues are found -- please file them on our github issues and we'll be sure to take a look and address them as we can. Thanks again for your continued patience as we continue to improve the Open AMT Cloud toolkit. - Mike","title":"Hello Everyone!"},{"location":"license/","text":"License \u00b6 Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2019 Intel Corporation Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"license/#license","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2019 Intel Corporation Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"release-notes/","text":"Release Notes \u00b6 If you haven't had a chance - checkout the Letter From Devs for a message from our development team. Key Feature Changes for 1.2 \u00b6 This section outlines key features changes between versions 1.1 and 1.2 for Open Active Management Technology (Open AMT) Cloud Toolkit. Additions \u00b6 RPS \u00b6 Hostname and Device Metadata tags: We have added the ability to define metadata tags for a each Intel\u00ae AMT profile. These tags will be applied to each device that is configured using the profile. Additionally, if RPC sends up the Intel\u00ae AMT device OS hostname during activation, RPS will save this information as part of the device information. When RPS configures a device, it will perform a POST call to MPS to register that device in MPS. This works in conjunction with the improved metadata gathering that RPC added in 1.1. Node 14 LTS support: RPS has been updated to support running on Node 14 LTS. RPC \u00b6 Docker support added: Added a dockerfile to RPC that allows customers to build and execute RPC in a docker container on the Intel\u00ae AMT device. MPS \u00b6 PostgreSQL integration added to MPS: To support additional metadata we are adding to MPS, we have added a PostgreSQL reference implementation to MPS. Hostname and Device Metadata tags: MPS will store device hostname and metadata tag information it receives from RPS in its PostgreSQL DB. When device information calls are made, the device hostname will be returned to the caller along with the other device information previously provided. Additionally, the GET devices call now supports an additional tags field (comma-delimited list) that will filter the devices based on the set of tags provided. This greatly improves scaling of this call with very large number of devices as well as reduces the need for filtering on the caller's side. Node 14 LTS support: RPS has been updated to support running on Node 14 LTS. MPS Scaling preview feature: We've added a scaling configuration feature to MPS that will allow MPS to scale up multiple instances of MPS in a Kubernetes environment to support large deployments. Both the CIRA connection side and the REST API side of MPS can be scaled up independently. When an MPS instance goes down, Intel\u00ae AMT device connections will be automatically reconnected to a different instance of MPS and the route to that device will be automatically updated. The current implementation is designed to run in an Azure Kubernetes Service behind a load balancer. As scaling is a preview feature, it currently doesn't support socket based Intel\u00ae AMT connections (KVM and SOL) or the new Metadata (hostnames and tags) feature. Other features such as PowerAction, HardwareInfo, EventLog, etc should all function in scaling mode. We expect to have all AMT features supported in scaling mode in the 1.3 release. Sample UI \u00b6 New look & feel The Sample UI has had a full rewrite in the 1.2 release based on much feedback from our customers. This updated UI supports the new hostname and metadata tag features. While this is still just a reference implementation to showcase the features of the MPS and RPS components, this restructuring of the Sample UI will: Aid developers as an example of how to use our APIs Help understand the value of Open AMT Cloud Toolkit. Modifications and Removals \u00b6 RPS \u00b6 RPS API changes We have performed some fundamental restructuring of the RPS REST APIs to better align with industry RESTful API standards. With these changes you'll see a greatly simplified structure, error messages in proper JSON structure, consistent property names across request/response, and correct HTML status codes being returned. This is a breaking change for customers who have already implemented against the 1.1 API. UI Toolkit \u00b6 Deprecation announcement of non-socket UI Toolkit components: We are removing the following UI Toolkit components in the 1.3 release: Audit Log, CIRA Config, Device Grid, Domain, and Profile. All of these components are just UI implementations of our existing REST APIs and the need for a REACT component for these items is unnecessary. We will continue to support and maintain the REACT components for KVM and SOL. Additionally, we have plans on expanding the KVM and SOL components to support additional UI frameworks beyond REACT. MPS & RPS \u00b6 Deprecation announcement of Developer Mode for both RPS and MPS We are making strides in improving production mode deployments through the use of deployment scripts and docker containers. Due to this work, the need for a \"simple\" developer deployment mode that doesn't use Vault or PostgreSQL is no longer required. As such, we'll be removing this mode prior to our 1.4 release. After the removal of developer mode, Vault and PostgreSQL will be required by default but the docker deployment scripts we have will make getting these services up and running easy. Customers will still have the option to modify the Vault and PostgreSQL interfaces to point to the database service(s) of their choice. Resolved Issues \u00b6 Vault Deployment: When deploying in production, customers will want to run Vault in production mode. We have added instruction on how to configure this here . Intel\u00ae AMT connection to MPS reliability after configuration: We have added a small delay between when Intel\u00ae AMT is activated and CIRA is configured that resolves the connection issues we were seeing in 1.1. Known Issues in 1.2 \u00b6 Intel\u00ae AMT device fails to re-connect to MPS after MPS is not available for an extended period of time: UPDATE: There is a firmware fix available for this issue, however, we are still testing to ensure that it completely resolves this issue. We'll let you know once this issue is resolved. If the MPS goes down for more than 2 days, Intel\u00ae AMT devices will no longer attempt to connect to MPS. If this happens, there are two ways to prompt Intel\u00ae AMT to attempt to re-connect to MPS: Unplug and re-plug the network cable Reboot the Intel\u00ae AMT device KVM freeze intermittently Viewing a remote desktop with high amount of screen changes (video playback), the KVM session can intermittently freeze. A full list of current open issues can be found in the issues page for each repository","title":"Release notes"},{"location":"release-notes/#release-notes","text":"If you haven't had a chance - checkout the Letter From Devs for a message from our development team.","title":"Release Notes"},{"location":"release-notes/#key-feature-changes-for-12","text":"This section outlines key features changes between versions 1.1 and 1.2 for Open Active Management Technology (Open AMT) Cloud Toolkit.","title":"Key Feature Changes for 1.2"},{"location":"release-notes/#additions","text":"","title":"Additions"},{"location":"release-notes/#rps","text":"Hostname and Device Metadata tags: We have added the ability to define metadata tags for a each Intel\u00ae AMT profile. These tags will be applied to each device that is configured using the profile. Additionally, if RPC sends up the Intel\u00ae AMT device OS hostname during activation, RPS will save this information as part of the device information. When RPS configures a device, it will perform a POST call to MPS to register that device in MPS. This works in conjunction with the improved metadata gathering that RPC added in 1.1. Node 14 LTS support: RPS has been updated to support running on Node 14 LTS.","title":"RPS"},{"location":"release-notes/#rpc","text":"Docker support added: Added a dockerfile to RPC that allows customers to build and execute RPC in a docker container on the Intel\u00ae AMT device.","title":"RPC"},{"location":"release-notes/#mps","text":"PostgreSQL integration added to MPS: To support additional metadata we are adding to MPS, we have added a PostgreSQL reference implementation to MPS. Hostname and Device Metadata tags: MPS will store device hostname and metadata tag information it receives from RPS in its PostgreSQL DB. When device information calls are made, the device hostname will be returned to the caller along with the other device information previously provided. Additionally, the GET devices call now supports an additional tags field (comma-delimited list) that will filter the devices based on the set of tags provided. This greatly improves scaling of this call with very large number of devices as well as reduces the need for filtering on the caller's side. Node 14 LTS support: RPS has been updated to support running on Node 14 LTS. MPS Scaling preview feature: We've added a scaling configuration feature to MPS that will allow MPS to scale up multiple instances of MPS in a Kubernetes environment to support large deployments. Both the CIRA connection side and the REST API side of MPS can be scaled up independently. When an MPS instance goes down, Intel\u00ae AMT device connections will be automatically reconnected to a different instance of MPS and the route to that device will be automatically updated. The current implementation is designed to run in an Azure Kubernetes Service behind a load balancer. As scaling is a preview feature, it currently doesn't support socket based Intel\u00ae AMT connections (KVM and SOL) or the new Metadata (hostnames and tags) feature. Other features such as PowerAction, HardwareInfo, EventLog, etc should all function in scaling mode. We expect to have all AMT features supported in scaling mode in the 1.3 release.","title":"MPS"},{"location":"release-notes/#sample-ui","text":"New look & feel The Sample UI has had a full rewrite in the 1.2 release based on much feedback from our customers. This updated UI supports the new hostname and metadata tag features. While this is still just a reference implementation to showcase the features of the MPS and RPS components, this restructuring of the Sample UI will: Aid developers as an example of how to use our APIs Help understand the value of Open AMT Cloud Toolkit.","title":"Sample UI"},{"location":"release-notes/#modifications-and-removals","text":"","title":"Modifications and Removals"},{"location":"release-notes/#rps_1","text":"RPS API changes We have performed some fundamental restructuring of the RPS REST APIs to better align with industry RESTful API standards. With these changes you'll see a greatly simplified structure, error messages in proper JSON structure, consistent property names across request/response, and correct HTML status codes being returned. This is a breaking change for customers who have already implemented against the 1.1 API.","title":"RPS"},{"location":"release-notes/#ui-toolkit","text":"Deprecation announcement of non-socket UI Toolkit components: We are removing the following UI Toolkit components in the 1.3 release: Audit Log, CIRA Config, Device Grid, Domain, and Profile. All of these components are just UI implementations of our existing REST APIs and the need for a REACT component for these items is unnecessary. We will continue to support and maintain the REACT components for KVM and SOL. Additionally, we have plans on expanding the KVM and SOL components to support additional UI frameworks beyond REACT.","title":"UI Toolkit"},{"location":"release-notes/#mps-rps","text":"Deprecation announcement of Developer Mode for both RPS and MPS We are making strides in improving production mode deployments through the use of deployment scripts and docker containers. Due to this work, the need for a \"simple\" developer deployment mode that doesn't use Vault or PostgreSQL is no longer required. As such, we'll be removing this mode prior to our 1.4 release. After the removal of developer mode, Vault and PostgreSQL will be required by default but the docker deployment scripts we have will make getting these services up and running easy. Customers will still have the option to modify the Vault and PostgreSQL interfaces to point to the database service(s) of their choice.","title":"MPS &amp; RPS"},{"location":"release-notes/#resolved-issues","text":"Vault Deployment: When deploying in production, customers will want to run Vault in production mode. We have added instruction on how to configure this here . Intel\u00ae AMT connection to MPS reliability after configuration: We have added a small delay between when Intel\u00ae AMT is activated and CIRA is configured that resolves the connection issues we were seeing in 1.1.","title":"Resolved Issues"},{"location":"release-notes/#known-issues-in-12","text":"Intel\u00ae AMT device fails to re-connect to MPS after MPS is not available for an extended period of time: UPDATE: There is a firmware fix available for this issue, however, we are still testing to ensure that it completely resolves this issue. We'll let you know once this issue is resolved. If the MPS goes down for more than 2 days, Intel\u00ae AMT devices will no longer attempt to connect to MPS. If this happens, there are two ways to prompt Intel\u00ae AMT to attempt to re-connect to MPS: Unplug and re-plug the network cable Reboot the Intel\u00ae AMT device KVM freeze intermittently Viewing a remote desktop with high amount of screen changes (video playback), the KVM session can intermittently freeze. A full list of current open issues can be found in the issues page for each repository","title":"Known Issues in 1.2"},{"location":"APIs/indexMPS/","text":"Steps on how to create your own Rest API call can be found in the Construct a REST API Call tutorial. API Calls \u00b6 We've documented the MPS REST API with Swagger*. Get Started with RPS REST API If unfamiliar with Swagger, see Swagger Documentation . The sections below list methods for MPS and a quick summary of each. Admin Methods \u00b6 Admin methods allow you to send calls for info for all devices or for MPS configuration information. Utilize these methods by setting the path to admin in your API call. Method Description/Usage AllDevices Lists all devices known to MPS, regardless of connected status ConnectedDevices Lists all devices currently connected to MPS Disconnect Disconnects the CIRA connection for a specified guid MEScript Downloads the cira_setup.mescript from MPS RootCertificate Download the MPS Root Certificate AMT Methods \u00b6 Note These methods are 1:1 device-specific. AMT methods allow you to send device-specific calls for things such as power actions or audit logs. Utilize these methods by setting the path to amt in your API call. Method Description/Usage AuditLog Returns a requested amount or time range of Intel\u00ae AMT Audit Log data for a specified guid EventLog Return sensor and hardware event data GeneralSettings View general network settings GetAMTFeatures View what AMT out-of-band features are enabled/disabled HardwareInfo Retrieve hardware information such as processor or storage PowerAction Perform an OOB power action PowerCapabilities View what OOB power actions are available for that device PowerState Retrieve current state of AMT device, returns a number that maps to an AMT Power State SetAMTFeatures Enable/Disable AMT features such as KVM, SOL, and IDE-R Version Retrieve AMT version of device","title":"Management Presence Server"},{"location":"APIs/indexMPS/#api-calls","text":"We've documented the MPS REST API with Swagger*. Get Started with RPS REST API If unfamiliar with Swagger, see Swagger Documentation . The sections below list methods for MPS and a quick summary of each.","title":"API Calls"},{"location":"APIs/indexMPS/#admin-methods","text":"Admin methods allow you to send calls for info for all devices or for MPS configuration information. Utilize these methods by setting the path to admin in your API call. Method Description/Usage AllDevices Lists all devices known to MPS, regardless of connected status ConnectedDevices Lists all devices currently connected to MPS Disconnect Disconnects the CIRA connection for a specified guid MEScript Downloads the cira_setup.mescript from MPS RootCertificate Download the MPS Root Certificate","title":"Admin Methods"},{"location":"APIs/indexMPS/#amt-methods","text":"Note These methods are 1:1 device-specific. AMT methods allow you to send device-specific calls for things such as power actions or audit logs. Utilize these methods by setting the path to amt in your API call. Method Description/Usage AuditLog Returns a requested amount or time range of Intel\u00ae AMT Audit Log data for a specified guid EventLog Return sensor and hardware event data GeneralSettings View general network settings GetAMTFeatures View what AMT out-of-band features are enabled/disabled HardwareInfo Retrieve hardware information such as processor or storage PowerAction Perform an OOB power action PowerCapabilities View what OOB power actions are available for that device PowerState Retrieve current state of AMT device, returns a number that maps to an AMT Power State SetAMTFeatures Enable/Disable AMT features such as KVM, SOL, and IDE-R Version Retrieve AMT version of device","title":"AMT Methods"},{"location":"APIs/indexRPS/","text":"We've documented the RPS REST API with Swagger*. Get Started with RPS REST API If unfamiliar with Swagger, see Swagger Documentation .","title":"Remote Provisioning Server"},{"location":"Docker/dockerCloud/","text":"Build Docker* Containers for MPS and RPS and Deploy to the Cloud \u00b6 The Open AMT Cloud Toolkit's Management Presence Server (MPS) and Remote Provisioning Server (RPS) provide support for deploying the microservices as Docker* images to the cloud. What You'll Do \u00b6 This tutorial explains the steps to deploy MPS and RPS as Docker images to the cloud using Microsoft Azure*: Create a Microsoft Azure* subscription. Create a Docker Hub account. Supply it with a Docker ID which will be used later. Login to the accounts. Build and deploy to the cloud. What You'll Need \u00b6 Hardware \u00b6 Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer At least one Intel vPro\u00ae device to manage Software \u00b6 Before MPS and RPS installation, install or subscribe to the following software: Microsoft Azure Subscription and Login Microsoft Azure Configuration Details Create a subscription for Microsoft Azure. Download Microsoft Azure Command Line Interface (CLI) . Test the Microsoft Azure CLI login Docker Hub Account Docker Hub Account Configuration Details Creating an account on Docker Hub requires the creation of a unique Docker ID consisting of 4 to 30 lowercase letters and digits. This ID becomes the user namespace for hosted services. The password and Docker ID will be used in the deployment instructions. A Docker Hub account enables user access to Docker Hub repositories, forums, support and more. See detailed instructions for creating an account here . Docker Desktop on Windows Docker Configuration Details The Docker for Windows installer defaults to enabling and running all the required settings necessary for this tutorial. After successful installation, the Docker icon (whale), appears on the task bar. To troubleshoot the installation, see the troubleshooting guide . Login to the Accounts \u00b6 To login: 1. Login to Microsoft Azure with the Azure CLI using the az command. Type the command in a Windows Command Prompt or Azure PowerShell. az login This command will invoke the default browser, which displays a login screen. 2. Login to the Docker hub account with the Docker ID and password. [KD: Please place pix here.] docker login --username [your Docker ID] --password [your Docker Hub Password] Build the Repositories \u00b6 Build the MPS and RPS Docker images from their respective directories with the build -t command, giving the image a name and tag: docker build -t [name:tag] Create a name and tag with lowercase letters, digits, and separators (i.e., underscores, periods, and dashes). Do not end a name or tag with a separator. Tags contain up to 128 characters. Note Building a fresh Docker image may take several minutes. To build MPS: 1. Navigate to the MPS folder and build the Docker image. Execute a build and push for MPS. The docker push command with the -t or --tag option enables the naming and tagging of a build: docker push -t [docker-id][name:tag] cd parent directory\\mps docker build . -t f30911230045\\mps-microservice:v1 docker push f30911230045\\mps-microservice:v1 To build the RPS: 2. Navigate to the RPS folder and build the Docker image. Execute a build and push for RPS. cd ..\\rps docker build . -t f30911230032\\rps-microservice:v1 docker push f30911230032\\rps-microservice:v1 Deploy the Images \u00b6 To deploy to the cloud: 1. After building the new MPS and RPS images, navigate to mps\\scripts\\docker-compose folder and use xcopy to copy the .env.template file to .env . The environment file .env.template contains the MPS and RPS environment variables to pass to the Docker engine. cd mps\\scripts\\docker-compose xcopy /Y .env.template .env Note Always preserve the .env.template file by copying it to a new file. 2. Set the image-related environment variables within the .env file: MPS_IMAGE=[name:tag from the build step] RPS_IMAGE=[name:tag from the build step] MPS_IMAGE=mps-microservice:v1 RPS_IMAGE=rps-microservice:v2 3. Set the proper proxy values if behind a proxy. set HTTP_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTPS_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTP_PROXY=http://10.3.4.52:8080 set HTTPS_PROXY=http://10.3.4.52:8080 Note If using a private Docker hub, set the password variable: DOCKER_LOGIN_PASSWORD=[your-docker-login-password 4. Run the oact-stack-azure-vm.bat file. This file: Installs the Docker on the Microsoft Azure VM Runs the docker-compose up command. Copies the .env-template file to .env. oact-stack-azure-vm.bat [your-solution-name] [region (e.g.,: westus)] [MPS-IMAGE] [RPS-IMAGE] cd scripts\\docker-compose oact-stack-azure-vm.bat vprodemo westus","title":"Docker* Images on the Cloud"},{"location":"Docker/dockerCloud/#build-docker-containers-for-mps-and-rps-and-deploy-to-the-cloud","text":"The Open AMT Cloud Toolkit's Management Presence Server (MPS) and Remote Provisioning Server (RPS) provide support for deploying the microservices as Docker* images to the cloud.","title":"Build Docker* Containers for MPS and RPS and Deploy to the Cloud"},{"location":"Docker/dockerCloud/#what-youll-do","text":"This tutorial explains the steps to deploy MPS and RPS as Docker images to the cloud using Microsoft Azure*: Create a Microsoft Azure* subscription. Create a Docker Hub account. Supply it with a Docker ID which will be used later. Login to the accounts. Build and deploy to the cloud.","title":"What You'll Do"},{"location":"Docker/dockerCloud/#what-youll-need","text":"","title":"What You'll Need"},{"location":"Docker/dockerCloud/#hardware","text":"Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer At least one Intel vPro\u00ae device to manage","title":"Hardware"},{"location":"Docker/dockerCloud/#software","text":"Before MPS and RPS installation, install or subscribe to the following software: Microsoft Azure Subscription and Login Microsoft Azure Configuration Details Create a subscription for Microsoft Azure. Download Microsoft Azure Command Line Interface (CLI) . Test the Microsoft Azure CLI login Docker Hub Account Docker Hub Account Configuration Details Creating an account on Docker Hub requires the creation of a unique Docker ID consisting of 4 to 30 lowercase letters and digits. This ID becomes the user namespace for hosted services. The password and Docker ID will be used in the deployment instructions. A Docker Hub account enables user access to Docker Hub repositories, forums, support and more. See detailed instructions for creating an account here . Docker Desktop on Windows Docker Configuration Details The Docker for Windows installer defaults to enabling and running all the required settings necessary for this tutorial. After successful installation, the Docker icon (whale), appears on the task bar. To troubleshoot the installation, see the troubleshooting guide .","title":"Software"},{"location":"Docker/dockerCloud/#login-to-the-accounts","text":"To login: 1. Login to Microsoft Azure with the Azure CLI using the az command. Type the command in a Windows Command Prompt or Azure PowerShell. az login This command will invoke the default browser, which displays a login screen. 2. Login to the Docker hub account with the Docker ID and password. [KD: Please place pix here.] docker login --username [your Docker ID] --password [your Docker Hub Password]","title":"Login to the Accounts"},{"location":"Docker/dockerCloud/#build-the-repositories","text":"Build the MPS and RPS Docker images from their respective directories with the build -t command, giving the image a name and tag: docker build -t [name:tag] Create a name and tag with lowercase letters, digits, and separators (i.e., underscores, periods, and dashes). Do not end a name or tag with a separator. Tags contain up to 128 characters. Note Building a fresh Docker image may take several minutes. To build MPS: 1. Navigate to the MPS folder and build the Docker image. Execute a build and push for MPS. The docker push command with the -t or --tag option enables the naming and tagging of a build: docker push -t [docker-id][name:tag] cd parent directory\\mps docker build . -t f30911230045\\mps-microservice:v1 docker push f30911230045\\mps-microservice:v1 To build the RPS: 2. Navigate to the RPS folder and build the Docker image. Execute a build and push for RPS. cd ..\\rps docker build . -t f30911230032\\rps-microservice:v1 docker push f30911230032\\rps-microservice:v1","title":"Build the Repositories"},{"location":"Docker/dockerCloud/#deploy-the-images","text":"To deploy to the cloud: 1. After building the new MPS and RPS images, navigate to mps\\scripts\\docker-compose folder and use xcopy to copy the .env.template file to .env . The environment file .env.template contains the MPS and RPS environment variables to pass to the Docker engine. cd mps\\scripts\\docker-compose xcopy /Y .env.template .env Note Always preserve the .env.template file by copying it to a new file. 2. Set the image-related environment variables within the .env file: MPS_IMAGE=[name:tag from the build step] RPS_IMAGE=[name:tag from the build step] MPS_IMAGE=mps-microservice:v1 RPS_IMAGE=rps-microservice:v2 3. Set the proper proxy values if behind a proxy. set HTTP_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTPS_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTP_PROXY=http://10.3.4.52:8080 set HTTPS_PROXY=http://10.3.4.52:8080 Note If using a private Docker hub, set the password variable: DOCKER_LOGIN_PASSWORD=[your-docker-login-password 4. Run the oact-stack-azure-vm.bat file. This file: Installs the Docker on the Microsoft Azure VM Runs the docker-compose up command. Copies the .env-template file to .env. oact-stack-azure-vm.bat [your-solution-name] [region (e.g.,: westus)] [MPS-IMAGE] [RPS-IMAGE] cd scripts\\docker-compose oact-stack-azure-vm.bat vprodemo westus","title":"Deploy the Images"},{"location":"Docker/dockerLocal/","text":"The Open Active Management Technology (Open AMT) Cloud Toolkit's Management Presence Server (MPS) and Remote Provisioning Server (RPS) provide support for deploying the microservices as Docker* images, standardized packages containing an application's source code, libraries, environment, and dependencies. Why Docker*? \u00b6 A Docker container is the instantiation of a Docker image as a virtualized unit that separates the application from the environment. Docker containers start and run reliably, securely, and portably inside different environments, eliminating some of the problems that occur with software deployment on varying platforms. Get more information about Docker images and containers at Docker resources. Get the Toolkit \u00b6 To clone the repositories: Open a Terminal or Powershell/Command Prompt and navigate to a directory of your choice for development: git clone --recursive https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v1.2.0 Change to the cloned open-amt-cloud-toolkit directory. cd open-amt-cloud-toolkit Set Environment Variables \u00b6 The .env.template file is used by docker to set environment variables. To set the environment variables: Copy the .env.template file to .env : Linux/Powershell cp .env.template .env Windows (Cmd Prompt) copy .env.template .env Set MPS_COMMON_NAME to your development system's IP Address. Replace YOURIPADDRESS in the command below or use a text editor to modify the .env file. Linux sed -i \"s|MPS_COMMON_NAME=localhost|MPS_COMMON_NAME=YOURIPADDRESS|g\" .env Windows (Powershell) ( Get-Content -Path './.env' ) -replace 'MPS_COMMON_NAME=localhost' , 'MPS_COMMON_NAME=YOURIPADDRESS' | Set-Content -Path './.env' Build and Run the Docker Images \u00b6 Build the MPS, RPS, and Sample UI Docker images and launch the stack. Run docker-compose to start the containers. sudo docker-compose -f \"docker-compose.yml\" up -d --build Important - For Windows* 10 While the docker-compose up command is running, you may see a pop-up ask for permission for Docker Desktop Filesharing. You must select Share It for the docker-compose up command to execute successfully. If the pop-up expires, docker-compose up will fail. You must run docker-compose down -v and then rerun docker-compose up to successfully start the containers. Check that all of the containers are running. sudo docker ps --format \"table {{.Image}}\\t{{.Status}}\\t{{.Names}}\" Success IMAGE STATUS samplewebui Up 6 seconds open-amt-cloud-toolkit_webui_1 rps-microservice:v1 Up 6 seconds open-amt-cloud-toolkit_rps_1 mps-microservice:v1 Up 6 seconds open-amt-cloud-toolkit_mps_1 vault Up 6 seconds open-amt-cloud-toolkit_vault_1 postgres Up 6 seconds open-amt-cloud-toolkit_rpsdb_1 If any of the above containers are not running, walk through the steps again or file a github issue here . Important Because the vault is running in a dev mode, stored secrets will be lost upon a restart, and profiles and configs must be recreated. They are not persistent in this mode. Be sure to run docker-compose down -v when bringing down the stack, which removes the volumes, and start fresh upon docker-compose up . To run vault in production mode, follow the guide here . Next up \u00b6 Login to RPS","title":"Express Docker Setup"},{"location":"Docker/dockerLocal/#why-docker","text":"A Docker container is the instantiation of a Docker image as a virtualized unit that separates the application from the environment. Docker containers start and run reliably, securely, and portably inside different environments, eliminating some of the problems that occur with software deployment on varying platforms. Get more information about Docker images and containers at Docker resources.","title":"Why Docker*?"},{"location":"Docker/dockerLocal/#get-the-toolkit","text":"To clone the repositories: Open a Terminal or Powershell/Command Prompt and navigate to a directory of your choice for development: git clone --recursive https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit --branch v1.2.0 Change to the cloned open-amt-cloud-toolkit directory. cd open-amt-cloud-toolkit","title":"Get the Toolkit"},{"location":"Docker/dockerLocal/#set-environment-variables","text":"The .env.template file is used by docker to set environment variables. To set the environment variables: Copy the .env.template file to .env : Linux/Powershell cp .env.template .env Windows (Cmd Prompt) copy .env.template .env Set MPS_COMMON_NAME to your development system's IP Address. Replace YOURIPADDRESS in the command below or use a text editor to modify the .env file. Linux sed -i \"s|MPS_COMMON_NAME=localhost|MPS_COMMON_NAME=YOURIPADDRESS|g\" .env Windows (Powershell) ( Get-Content -Path './.env' ) -replace 'MPS_COMMON_NAME=localhost' , 'MPS_COMMON_NAME=YOURIPADDRESS' | Set-Content -Path './.env'","title":"Set Environment Variables"},{"location":"Docker/dockerLocal/#build-and-run-the-docker-images","text":"Build the MPS, RPS, and Sample UI Docker images and launch the stack. Run docker-compose to start the containers. sudo docker-compose -f \"docker-compose.yml\" up -d --build Important - For Windows* 10 While the docker-compose up command is running, you may see a pop-up ask for permission for Docker Desktop Filesharing. You must select Share It for the docker-compose up command to execute successfully. If the pop-up expires, docker-compose up will fail. You must run docker-compose down -v and then rerun docker-compose up to successfully start the containers. Check that all of the containers are running. sudo docker ps --format \"table {{.Image}}\\t{{.Status}}\\t{{.Names}}\" Success IMAGE STATUS samplewebui Up 6 seconds open-amt-cloud-toolkit_webui_1 rps-microservice:v1 Up 6 seconds open-amt-cloud-toolkit_rps_1 mps-microservice:v1 Up 6 seconds open-amt-cloud-toolkit_mps_1 vault Up 6 seconds open-amt-cloud-toolkit_vault_1 postgres Up 6 seconds open-amt-cloud-toolkit_rpsdb_1 If any of the above containers are not running, walk through the steps again or file a github issue here . Important Because the vault is running in a dev mode, stored secrets will be lost upon a restart, and profiles and configs must be recreated. They are not persistent in this mode. Be sure to run docker-compose down -v when bringing down the stack, which removes the volumes, and start fresh upon docker-compose up . To run vault in production mode, follow the guide here .","title":"Build and Run the Docker Images"},{"location":"Docker/dockerLocal/#next-up","text":"Login to RPS","title":"Next up"},{"location":"Docker/dockerLocal_prodVault/","text":"Run MPS and RPS using docker and production vault \u00b6 Introduction \u00b6 This document describes how to run MPS and RPS using vault in production server mode. The current local docker-compose file runs vault in development mode which makes experimenting with the services easier since static tokens can be used for access and unsealing vault is not required. The downside to this approach is all vault data is stored only in memory which is lost once the vault container is stopped. Running vault in production mode requires more steps but allows vault data to persist after container restarts. Update the vault section in the docker-compose file ( scripts\\docker-compose\\docker-compose.yaml ) with the section below: vault : image : vault container_name : prodvault environment : VAULT_ADDR : http://127.0.0.1:8200 ports : - \"8200:8200\" volumes : - private-volume:/vault/file:rw - ./vault:/vault/config:rw cap_add : - IPC_LOCK entrypoint : vault server -config=/vault/config/vault.json Create a folder named vault located in scripts\\docker-compose\\ and add a file named vault.json with the contents below: { \"backend\" :{ \"file\" :{ \"path\" : \"/vault/file\" } }, \"listener\" :{ \"tcp\" :{ \"address\" : \"0.0.0.0:8200\" , \"tls_disable\" : 1 } }, \"default_lease_ttl\" : \"168h\" , \"max_lease_ttl\" : \"0h\" , \"ui\" : true , \"log_level\" : \"Debug\" } Run docker command to start the stack: docker-compose up Run the following command to initialize the vault instance. docker exec -it prodvault vault operator init -n 1 -t 1 Make note of unseal key 1 and initial root token. Example Unseal Key 1: 0H8sK2QvVsqBKnUz6okBtDOqTVFSgJpdSKVe+colgXM= Initial Root Token: s.1glIfXnANPSnEmKLCzk4PQCO 5. Run the unseal command to decrypt the contents of the vault. Note: this step has to be performed each time the vault container is restarted. docker exec -it prodvault vault operator unseal [unseal key 1] Example docker exec -it prodvault vault operator unseal 0H8sK2QvVsqBKnUz6okBtDOqTVFSgJpdSKVe+colgXM= The response to the command should look similar to this: Key Value --- ----- Seal Type shamir Initialized true Sealed false Total Shares 1 Threshold 1 Version 1.6.0 Storage Type file Cluster Name vault-cluster-a39d7ef8 Cluster ID d1bc85f9-f405-44b3-0553-50f5e10b140e HA Enabled false 6. Login to vault with the following command using the initial root token: docker exec -it prodvault vault login [Initial Root Token] Example docker exec -it prodvault vault login s.1glIfXnANPSnEmKLCzk4PQCO 7. Enable the kv secrets engine docker exec -it prodvault vault secrets enable -version=2 kv 8. Update env variables located in scripts\\docker-compose\\.env a) Update vault tokens used in each service RPS_VAULT_TOKEN=[initial root token] MPS_VAULT_TOKEN=[initial root token] Example RPS_VAULT_TOKEN=s.1glIfXnANPSnEmKLCzk4PQCO MPS_VAULT_TOKEN=s.1glIfXnANPSnEmKLCzk4PQCO b) update secrets path MPS_SECRETS_PATH=kv/data/ RPS_SECRETS_PATH=kv/data/ 9. Press ctrl-c to stop the stack 10. Restart the stack using the command docker-compose up . 11. Rerun command in step 5 to unseal the vault.","title":"Run MPS and RPS using docker and production vault"},{"location":"Docker/dockerLocal_prodVault/#run-mps-and-rps-using-docker-and-production-vault","text":"","title":"Run MPS and RPS using docker and production vault"},{"location":"Docker/dockerLocal_prodVault/#introduction","text":"This document describes how to run MPS and RPS using vault in production server mode. The current local docker-compose file runs vault in development mode which makes experimenting with the services easier since static tokens can be used for access and unsealing vault is not required. The downside to this approach is all vault data is stored only in memory which is lost once the vault container is stopped. Running vault in production mode requires more steps but allows vault data to persist after container restarts. Update the vault section in the docker-compose file ( scripts\\docker-compose\\docker-compose.yaml ) with the section below: vault : image : vault container_name : prodvault environment : VAULT_ADDR : http://127.0.0.1:8200 ports : - \"8200:8200\" volumes : - private-volume:/vault/file:rw - ./vault:/vault/config:rw cap_add : - IPC_LOCK entrypoint : vault server -config=/vault/config/vault.json Create a folder named vault located in scripts\\docker-compose\\ and add a file named vault.json with the contents below: { \"backend\" :{ \"file\" :{ \"path\" : \"/vault/file\" } }, \"listener\" :{ \"tcp\" :{ \"address\" : \"0.0.0.0:8200\" , \"tls_disable\" : 1 } }, \"default_lease_ttl\" : \"168h\" , \"max_lease_ttl\" : \"0h\" , \"ui\" : true , \"log_level\" : \"Debug\" } Run docker command to start the stack: docker-compose up Run the following command to initialize the vault instance. docker exec -it prodvault vault operator init -n 1 -t 1 Make note of unseal key 1 and initial root token. Example Unseal Key 1: 0H8sK2QvVsqBKnUz6okBtDOqTVFSgJpdSKVe+colgXM= Initial Root Token: s.1glIfXnANPSnEmKLCzk4PQCO 5. Run the unseal command to decrypt the contents of the vault. Note: this step has to be performed each time the vault container is restarted. docker exec -it prodvault vault operator unseal [unseal key 1] Example docker exec -it prodvault vault operator unseal 0H8sK2QvVsqBKnUz6okBtDOqTVFSgJpdSKVe+colgXM= The response to the command should look similar to this: Key Value --- ----- Seal Type shamir Initialized true Sealed false Total Shares 1 Threshold 1 Version 1.6.0 Storage Type file Cluster Name vault-cluster-a39d7ef8 Cluster ID d1bc85f9-f405-44b3-0553-50f5e10b140e HA Enabled false 6. Login to vault with the following command using the initial root token: docker exec -it prodvault vault login [Initial Root Token] Example docker exec -it prodvault vault login s.1glIfXnANPSnEmKLCzk4PQCO 7. Enable the kv secrets engine docker exec -it prodvault vault secrets enable -version=2 kv 8. Update env variables located in scripts\\docker-compose\\.env a) Update vault tokens used in each service RPS_VAULT_TOKEN=[initial root token] MPS_VAULT_TOKEN=[initial root token] Example RPS_VAULT_TOKEN=s.1glIfXnANPSnEmKLCzk4PQCO MPS_VAULT_TOKEN=s.1glIfXnANPSnEmKLCzk4PQCO b) update secrets path MPS_SECRETS_PATH=kv/data/ RPS_SECRETS_PATH=kv/data/ 9. Press ctrl-c to stop the stack 10. Restart the stack using the command docker-compose up . 11. Rerun command in step 5 to unseal the vault.","title":"Introduction"},{"location":"Docker/overview/","text":"Build and Deploy Microservices with Local Docker* Images \u00b6 This section contains instructions for deploying the Open AMT Cloud Toolkit's Management Presence Server (MPS) and Remote Provisioning Server (RPS) on a local development system as Docker* images. These Hello World deployment instructions detail how to install the microservices manually on a development system and are not intended as production environment instructions. Figure 1: Deploy microservices on a local development system as Docker images. What You'll Need \u00b6 Hardware \u00b6 Configure a network that includes: A development system At least one Intel vPro\u00ae device A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network. Development System Software \u00b6 Before MPS and RPS installation, install the following software: Docker* Desktop for Windows or Linux Info Docker Configuration Details: (1) The Docker for Windows installer defaults to enable all the required settings for this tutorial. (2) After successful installation, the Docker icon (whale), will appear on the task bar. (3) To troubleshoot the installation, see the troubleshooting guide . git What You'll Do \u00b6 To complete a Hello World microservice deployment: Build and Deploy Docker* Images Locally Login and Configure RPS Build RPC Copy RPC to a Managed Device To connect the managed device: Run RPC on a Managed Device Manage the Device with MPS These sections include instructions for Windows and Linux* environments. Run instructions in a terminal window, the Windows Command Prompt in Administrator mode or the Linux shell/terminal. Estimated completion time: 15 minutes Next up \u00b6 Build Docker* Images","title":"Docker Overview"},{"location":"Docker/overview/#build-and-deploy-microservices-with-local-docker-images","text":"This section contains instructions for deploying the Open AMT Cloud Toolkit's Management Presence Server (MPS) and Remote Provisioning Server (RPS) on a local development system as Docker* images. These Hello World deployment instructions detail how to install the microservices manually on a development system and are not intended as production environment instructions. Figure 1: Deploy microservices on a local development system as Docker images.","title":"Build and Deploy Microservices with Local Docker* Images"},{"location":"Docker/overview/#what-youll-need","text":"","title":"What You'll Need"},{"location":"Docker/overview/#hardware","text":"Configure a network that includes: A development system At least one Intel vPro\u00ae device A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network.","title":"Hardware"},{"location":"Docker/overview/#development-system-software","text":"Before MPS and RPS installation, install the following software: Docker* Desktop for Windows or Linux Info Docker Configuration Details: (1) The Docker for Windows installer defaults to enable all the required settings for this tutorial. (2) After successful installation, the Docker icon (whale), will appear on the task bar. (3) To troubleshoot the installation, see the troubleshooting guide . git","title":"Development System Software"},{"location":"Docker/overview/#what-youll-do","text":"To complete a Hello World microservice deployment: Build and Deploy Docker* Images Locally Login and Configure RPS Build RPC Copy RPC to a Managed Device To connect the managed device: Run RPC on a Managed Device Manage the Device with MPS These sections include instructions for Windows and Linux* environments. Run instructions in a terminal window, the Windows Command Prompt in Administrator mode or the Linux shell/terminal. Estimated completion time: 15 minutes","title":"What You'll Do"},{"location":"Docker/overview/#next-up","text":"Build Docker* Images","title":"Next up"},{"location":"General/buildRPC/","text":"The Remote Provisioning Client (RPC) on the managed devices establishes the Client Initiated Remote Access (CIRA) connection of the Intel\u00ae Active Management Technology (Intel\u00ae AMT) device to the Management Presence Server (MPS). This allows the remote device to call home to the MPS. After running the RPC, the Intel\u00ae AMT managed device can be managed remotely using the web interface! Production Environment In a production environment, RPC can be deployed with an in-band manageability agent to distribute it to the fleet of AMT devices. The in-band manageability agent can invoke RPC to run and activate the AMT devices. Figure 1: RPC Configuration Figure 1 Details The RPC on the managed devices communicates with the Manageability Engine Interface (MEI) and Remote Provisioning Server (RPS) interfaces. The MEI uses the ME Driver to talk to Intel\u00ae AMT (Steps 3 and 4, Figure 1). The RPC activates Intel\u00ae AMT with an AMT profile, which is associated with a CIRA configuration. The profile, which also distinguishes between Client Control Mode (CCM) or Admin Control Mode (ACM), and configuration were created in Create a CIRA Config or Create an AMT Profile . After running RPC with a profile, the MPS can manage the remote device and issue AMT commands (Steps 5, Figure 1). Build RPC \u00b6 We leverage GitHub Actions as a means to build RPC automatically leveraging Github's CI/CD Infrastructure. This avoids having to deal with the challenges of getting your build environment just right on your local machine and allows you to get up and running much faster. However, if you wish to do this locally, please follow the instructions here . Optionally, to build RPC with Docker, skip to Docker Build . Read more about GitHub Actions here Github Actions \u00b6 To Build the RPC with Github Actions \u00b6 Create a fork of the repository. Fork rpc on github Click on the Actions tab at the top and select Build RPC (Native) Debug/Release . Click the Run Workflow dropdown. Select the branch: v1.2.0 from the Use workflow from dropdown. By default, the Build Type should be release . Click the Run Workflow button. The build time ranges from 15 to 20 minutes. Once the download is complete, click the completed job which will feature a green checkmark. Download the appropriate RPC for your managed device's OS under the Artifacts section. To Delete your workflow run \u00b6 Click the ... menu for the workflow. Choose the Delete workflow run option. Docker Build \u00b6 To build RPC w/ Docker, use the following command from the root directory of the open-amt-cloud-toolkit: cd ./rpc && docker build -f \"Dockerfile\" -t rpc:latest . Run RPC to Activate and Connect the AMT Device \u00b6 To run the application and connect the managed device: On the managed device, open a Terminal (Linux) or Powershell/Command Prompt as Administrator (Windows). Navigate to the directory containing the RPC application. Run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [Development-IP-Address] with the development system's IP address, where the MPS and RPS servers are running. Replace [profile-name] with your created profile from the Web Server. The RPC application command line parameters are case sensitive. Linux sudo ./rpc -u wss:// [ Development-IP-Address ] :8080 --nocertcheck -c \"-t activate --profile [profile-name]\" Docker (On Linux Host Only) sudo docker run --device = /dev/mei0 rpc:latest --url wss:// [ Development-IP-Address ] :8080 --nocertcheck -c \"activate --profile [profile-name]\" Windows is not supported due to current limitations. See Devices in Containers on Windows for more information. Windows rpc.exe -u wss://[Development-IP-Address]:8080 --nocertcheck -c \"-t activate --profile [profile-name]\" Note Because we are using a self-signed certificate for easier development testing, we need to supply the --nocertcheck flag. In production, you would opt for a CA signed certificate. Find out more information about the flag and other arguments . Success Example Output after Activating and Configuring a device into ACM: Troubleshooting Run into an issue? Try these troubleshooting steps . Next up \u00b6 Manage AMT Device","title":"Build & Run RPC"},{"location":"General/buildRPC/#build-rpc","text":"We leverage GitHub Actions as a means to build RPC automatically leveraging Github's CI/CD Infrastructure. This avoids having to deal with the challenges of getting your build environment just right on your local machine and allows you to get up and running much faster. However, if you wish to do this locally, please follow the instructions here . Optionally, to build RPC with Docker, skip to Docker Build . Read more about GitHub Actions here","title":"Build RPC"},{"location":"General/buildRPC/#github-actions","text":"","title":"Github Actions"},{"location":"General/buildRPC/#to-build-the-rpc-with-github-actions","text":"Create a fork of the repository. Fork rpc on github Click on the Actions tab at the top and select Build RPC (Native) Debug/Release . Click the Run Workflow dropdown. Select the branch: v1.2.0 from the Use workflow from dropdown. By default, the Build Type should be release . Click the Run Workflow button. The build time ranges from 15 to 20 minutes. Once the download is complete, click the completed job which will feature a green checkmark. Download the appropriate RPC for your managed device's OS under the Artifacts section.","title":"To Build the RPC with Github Actions"},{"location":"General/buildRPC/#to-delete-your-workflow-run","text":"Click the ... menu for the workflow. Choose the Delete workflow run option.","title":"To Delete your workflow run"},{"location":"General/buildRPC/#docker-build","text":"To build RPC w/ Docker, use the following command from the root directory of the open-amt-cloud-toolkit: cd ./rpc && docker build -f \"Dockerfile\" -t rpc:latest .","title":"Docker Build"},{"location":"General/buildRPC/#run-rpc-to-activate-and-connect-the-amt-device","text":"To run the application and connect the managed device: On the managed device, open a Terminal (Linux) or Powershell/Command Prompt as Administrator (Windows). Navigate to the directory containing the RPC application. Run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [Development-IP-Address] with the development system's IP address, where the MPS and RPS servers are running. Replace [profile-name] with your created profile from the Web Server. The RPC application command line parameters are case sensitive. Linux sudo ./rpc -u wss:// [ Development-IP-Address ] :8080 --nocertcheck -c \"-t activate --profile [profile-name]\" Docker (On Linux Host Only) sudo docker run --device = /dev/mei0 rpc:latest --url wss:// [ Development-IP-Address ] :8080 --nocertcheck -c \"activate --profile [profile-name]\" Windows is not supported due to current limitations. See Devices in Containers on Windows for more information. Windows rpc.exe -u wss://[Development-IP-Address]:8080 --nocertcheck -c \"-t activate --profile [profile-name]\" Note Because we are using a self-signed certificate for easier development testing, we need to supply the --nocertcheck flag. In production, you would opt for a CA signed certificate. Find out more information about the flag and other arguments . Success Example Output after Activating and Configuring a device into ACM: Troubleshooting Run into an issue? Try these troubleshooting steps .","title":"Run RPC to Activate and Connect the AMT Device"},{"location":"General/buildRPC/#next-up","text":"Manage AMT Device","title":"Next up"},{"location":"General/buildRPC_GithubActions/","text":"Build RPC \u00b6 We leverage GitHub Actions as a means to build RPC automatically leveraging Github's CI/CD Infrastructure. This avoids having to deal with the challenges of getting your build environment just right on your local machine and allows you to get up and running much faster. However, if you wish to do this locally, please follow the instructions here . Read more about GitHub Actions here First you'll want to create a fork of the repository. Fork rpc on github Click on \"Actions\" and Select \"Build RPC (Native)\" Workflow Click \"Run Workflow\", select branch \"master\", and click \"Run Workflow\" Grab a coffee, as the build for Windows will take roughly 30 minutes and the build for linux will take roughly 5 minutes. Once complete, click the completed job, and download the appropriate RPC for your OS under the \"Artifacts\" section. Run RPC to Activate and Connect the AMT Device \u00b6 Run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [IP-Address] with the IP address of the server where the MPS and RPS services are running Replace [profile-name] with your created profile from the Web Server. Windows rpc.exe -u wss://[IP-Address]:8080 -c \"-t activate --profile [profile-name]\" Linux sudo ./rpc -u wss:// [ IP-Address ] :8080 -c \"-t activate --profile [profile-name]\"","title":"buildRPC GithubActions"},{"location":"General/buildRPC_GithubActions/#build-rpc","text":"We leverage GitHub Actions as a means to build RPC automatically leveraging Github's CI/CD Infrastructure. This avoids having to deal with the challenges of getting your build environment just right on your local machine and allows you to get up and running much faster. However, if you wish to do this locally, please follow the instructions here . Read more about GitHub Actions here First you'll want to create a fork of the repository. Fork rpc on github Click on \"Actions\" and Select \"Build RPC (Native)\" Workflow Click \"Run Workflow\", select branch \"master\", and click \"Run Workflow\" Grab a coffee, as the build for Windows will take roughly 30 minutes and the build for linux will take roughly 5 minutes. Once complete, click the completed job, and download the appropriate RPC for your OS under the \"Artifacts\" section.","title":"Build RPC"},{"location":"General/buildRPC_GithubActions/#run-rpc-to-activate-and-connect-the-amt-device","text":"Run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [IP-Address] with the IP address of the server where the MPS and RPS services are running Replace [profile-name] with your created profile from the Web Server. Windows rpc.exe -u wss://[IP-Address]:8080 -c \"-t activate --profile [profile-name]\" Linux sudo ./rpc -u wss:// [ IP-Address ] :8080 -c \"-t activate --profile [profile-name]\"","title":"Run RPC to Activate and Connect the AMT Device"},{"location":"General/createCIRAConfig/","text":"Out-of-band (OOB) manageability is a separate channel of remote management that allows administrators to securely access Intel\u00ae Active Management Technology (Intel\u00ae AMT) devices at a hardware level, beneath the operating system. This is accomplished with Client Initiated Remote Access (CIRA), which enables a CIRA-capable edge device to initiate and establish a persistent connection to the MPS. With this persistent connection, administrators can execute various system actions on the remotely managed device, including: Reboot Reset Power on and power up Power off and power down Boot to BIOS Reset to BIOS Intel AMT supports these actions and more. As long as the managed device is connected to the network and to a power source, it can maintain a persistent connection. To create a CIRA Config: Select the CIRA Configs tab from the left-hand menu. In the top-right corner, click Add New. Figure 1: Create a new CIRA Config. Specify a Config Name of your choice. Select IPv4 , and provide your developement system's IP Address. Cert Common Name (CN=) should auto-populate. If not, provide your developement system's IP Address. Leave Port as the default, 4433. Set User Name and Password to the following: Field Value User Name standalone Password G@ppm0ym Leave the slider set on Auto-load . Click Save. Example Example CIRA Config: Figure 2: Example CIRA Config. Next up \u00b6 Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Profiles also distinguish between activating in: Client Control Mode (CCM): This mode offers nearly all manageability features. However, it does not currently support Keyboard, Video, Mouse Control. For other features, such as Serial-Over-LAN or Storage Redirection (IDE-R, USB-R), user consent is required . Admin Control Mode (ACM): ACM mode supports the same CCM features in addition to Keyboard, Video, Mouse (KVM) or Redirection without user consent . This means it is not necessary to have a person on-site to remote in and manage an edge device. In most IoT use cases, edge devices such as digital signage or kiosks may not be easily accessible or have available employees nearby. ACM mode proves immensely helpful in these scenarios.","title":"Create a CIRA Config"},{"location":"General/createCIRAConfig/#next-up","text":"Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Profiles also distinguish between activating in: Client Control Mode (CCM): This mode offers nearly all manageability features. However, it does not currently support Keyboard, Video, Mouse Control. For other features, such as Serial-Over-LAN or Storage Redirection (IDE-R, USB-R), user consent is required . Admin Control Mode (ACM): ACM mode supports the same CCM features in addition to Keyboard, Video, Mouse (KVM) or Redirection without user consent . This means it is not necessary to have a person on-site to remote in and manage an edge device. In most IoT use cases, edge devices such as digital signage or kiosks may not be easily accessible or have available employees nearby. ACM mode proves immensely helpful in these scenarios.","title":"Next up"},{"location":"General/createProfileACM/","text":"Admin Control Mode (ACM) provides full access to Intel\u00ae Active Management Technology (Intel\u00ae AMT) functionality. User consent is optional for redirection features. Figure 1: Set up configuration and profiles for N number of clients. What You'll Need \u00b6 Provisioning Certificate \u00b6 By purchasing a certificate, you'll be able to remotely activate an Intel AMT device in ACM. This feature enables you to disable User Consent. Provisioning Certificates are available from four different Certificate Authorities: Comodo DigiCert Entrust GoDaddy Important For ACM in Open Active Management Technology (Open AMT) Cloud Toolkit, use only certificate vendors that support Intel\u00ae AMT. DNS Suffix \u00b6 The DNS suffix encompasses the domain suffix (e.g., .com) and follows the hostname. Consider the following DNS Name example: Example DNS Name: cb-vending1.burgerbusiness.com In this example, the hostname is cb-vending1 and the DNS suffix is burgerbusiness.com. To set the DNS suffix: Manually set it using MEBX on the managed device. Find instructions here Alternately, change the DHCP Option 15 to DNS Suffix within the Router settings. To find the the DNS suffix, use the following command: Linux ifconfig Windows ipconfig /all Create a Profile \u00b6 Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Production Environment In a production environment, devices are typically activated in ACM mode. ACM mode enables KVM access to devices without user consent. In most IoT use cases, edge devices such as digital signage or kiosks may not have immediate access to it or employees nearby. ACM mode proves immensely helpful in these scenarios. To create an ACM profile: Select the Profiles tab from the menu on the left. Under the Profiles tab, click Add New in the top-right corner to create a profile. Figure 1: Create a new profile. Specify a Profile Name of your choice. Under Activation , select Admin Control Mode from the dropdown menu. In order to facilitate quick set up, leave Generate Random AMT Password unchecked. Production Environment In a production environment, generate a random password for each AMT device to create a stronger, more secure AMT environment. However, if opting to use random passwords, be aware of the risks. If the Vault database is lost or corrupted, all randomly generated credentials will be lost. There will be no way to login. The administrator will have to clear the CMOS battery on the managed devices! Provide a strong AMT Password . AMT will verify this password when receiving a command from a MPS server. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character Leave Generate Random MEBX Password unchecked. Provide a strong MEBX Password . This password can be used to access MEBx on the AMT device. Select DHCP as Network Configuration . Select the name of the CIRA Configuration you created previously from the drop-down menu. Optionally, add Tags to help in organizing and querying devices as your list of managed devices grow. Click Save. Example Example ACM Profile: Figure 2: Example ACM profile. Create a Domain Profile \u00b6 In addition to a CIRA Config and an ACM Profile, ACM requires the creation of a Domain profile. Intel AMT checks the network DNS suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority. To create a domain: Select the Domains tab from the left-hand menu. In the top-right corner, click Add New. Figure 3: Create Domain. Specify a name of your choice for the Domain Profile for the Domain Name field. This does not have to be the actual network Domain Name/Suffix. Provide your Domain Suffix . This is the actual DNS Suffix of the network domain that is set in DHCP Option 15 or manually on the AMT device through MEBX. Click Choose File and select your purchased Provisioning Certificate. This certificate must contain the private key. Provide the Provisioning Certificate Password used to encrypt the .pfx file. Click Save. Example Example Domain: Figure 4: Example Domain profile. Next Up \u00b6 Build & Run RPC","title":"Create a Profile with ACM"},{"location":"General/createProfileACM/#what-youll-need","text":"","title":"What You'll Need"},{"location":"General/createProfileACM/#provisioning-certificate","text":"By purchasing a certificate, you'll be able to remotely activate an Intel AMT device in ACM. This feature enables you to disable User Consent. Provisioning Certificates are available from four different Certificate Authorities: Comodo DigiCert Entrust GoDaddy Important For ACM in Open Active Management Technology (Open AMT) Cloud Toolkit, use only certificate vendors that support Intel\u00ae AMT.","title":"Provisioning Certificate"},{"location":"General/createProfileACM/#dns-suffix","text":"The DNS suffix encompasses the domain suffix (e.g., .com) and follows the hostname. Consider the following DNS Name example: Example DNS Name: cb-vending1.burgerbusiness.com In this example, the hostname is cb-vending1 and the DNS suffix is burgerbusiness.com. To set the DNS suffix: Manually set it using MEBX on the managed device. Find instructions here Alternately, change the DHCP Option 15 to DNS Suffix within the Router settings. To find the the DNS suffix, use the following command: Linux ifconfig Windows ipconfig /all","title":"DNS Suffix"},{"location":"General/createProfileACM/#create-a-profile","text":"Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Production Environment In a production environment, devices are typically activated in ACM mode. ACM mode enables KVM access to devices without user consent. In most IoT use cases, edge devices such as digital signage or kiosks may not have immediate access to it or employees nearby. ACM mode proves immensely helpful in these scenarios. To create an ACM profile: Select the Profiles tab from the menu on the left. Under the Profiles tab, click Add New in the top-right corner to create a profile. Figure 1: Create a new profile. Specify a Profile Name of your choice. Under Activation , select Admin Control Mode from the dropdown menu. In order to facilitate quick set up, leave Generate Random AMT Password unchecked. Production Environment In a production environment, generate a random password for each AMT device to create a stronger, more secure AMT environment. However, if opting to use random passwords, be aware of the risks. If the Vault database is lost or corrupted, all randomly generated credentials will be lost. There will be no way to login. The administrator will have to clear the CMOS battery on the managed devices! Provide a strong AMT Password . AMT will verify this password when receiving a command from a MPS server. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character Leave Generate Random MEBX Password unchecked. Provide a strong MEBX Password . This password can be used to access MEBx on the AMT device. Select DHCP as Network Configuration . Select the name of the CIRA Configuration you created previously from the drop-down menu. Optionally, add Tags to help in organizing and querying devices as your list of managed devices grow. Click Save. Example Example ACM Profile: Figure 2: Example ACM profile.","title":"Create a Profile"},{"location":"General/createProfileACM/#create-a-domain-profile","text":"In addition to a CIRA Config and an ACM Profile, ACM requires the creation of a Domain profile. Intel AMT checks the network DNS suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority. To create a domain: Select the Domains tab from the left-hand menu. In the top-right corner, click Add New. Figure 3: Create Domain. Specify a name of your choice for the Domain Profile for the Domain Name field. This does not have to be the actual network Domain Name/Suffix. Provide your Domain Suffix . This is the actual DNS Suffix of the network domain that is set in DHCP Option 15 or manually on the AMT device through MEBX. Click Choose File and select your purchased Provisioning Certificate. This certificate must contain the private key. Provide the Provisioning Certificate Password used to encrypt the .pfx file. Click Save. Example Example Domain: Figure 4: Example Domain profile.","title":"Create a Domain Profile"},{"location":"General/createProfileACM/#next-up","text":"Build & Run RPC","title":"Next Up"},{"location":"General/createProfileCCM/","text":"Client Control Mode (CCM) provides full access to features of Intel\u00ae Active Management Technology (Intel\u00ae AMT), but it does require user consent for all redirection features. These features require user consent: Keyboard, Video, Mouse (KVM) Control IDE-Redirection for sharing and mounting images remotely Serial-over-LAN (SOL) Figure 1: Set up configuration and profiles for N number of clients. Create a Profile \u00b6 Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC) . To create a CCM profile: Select the Profiles tab from the menu on the left. Under the Profiles tab, click New in the top-right corner to create a profile. Figure 1: Create a new profile. Specify a Profile Name of your choice. Under Activation Mode , select Client Control Mode from the dropdown menu. Leave Generate Random AMT Password unchecked. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. Provide a strong AMT Password . AMT will verify this password when receiving a command from a MPS server. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character An MEBX Password is disabled for CCM activation. Select DHCP as Network Configuration . Select the name of the CIRA Configuration you created previously from the drop-down menu. Optionally, add Tags to help in organizing and querying devices as your list of managed devices grow. Click Save. Example Example CCM Profile: Figure 2: Example CCM profile. Next up \u00b6 Build & Run RPC","title":"Create a Profile with CCM"},{"location":"General/createProfileCCM/#create-a-profile","text":"Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC) . To create a CCM profile: Select the Profiles tab from the menu on the left. Under the Profiles tab, click New in the top-right corner to create a profile. Figure 1: Create a new profile. Specify a Profile Name of your choice. Under Activation Mode , select Client Control Mode from the dropdown menu. Leave Generate Random AMT Password unchecked. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. Provide a strong AMT Password . AMT will verify this password when receiving a command from a MPS server. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character An MEBX Password is disabled for CCM activation. Select DHCP as Network Configuration . Select the name of the CIRA Configuration you created previously from the drop-down menu. Optionally, add Tags to help in organizing and querying devices as your list of managed devices grow. Click Save. Example Example CCM Profile: Figure 2: Example CCM profile.","title":"Create a Profile"},{"location":"General/createProfileCCM/#next-up","text":"Build & Run RPC","title":"Next up"},{"location":"General/loginToRPS/","text":"The web portal is available for login after the deployment of the Management Presence Server (MPS) , Remote Provisioning Server (RPS) , and Sample Web UI . Make sure all three are successfully running before attempting to login. Before Logging In \u00b6 Important Do not skip these steps. It enables the Sample Web UI to connect to the MPS server. Open any modern web browser and navigate to the following link. Because the MPS Server is using self-signed certificates in developer mode, we must proceed past the warning screen for the Sample Web UI to connect. https://[Development-IP-Address]:3000 A warning screen will prompt. Click Advanced and then Proceed to continue to connect to the MPS webserver. Example After clicking proceed, you will see the following text. This is OK. Move on to the next section: Log In. Cannot GET / Log In \u00b6 Open a new tab in your browser and navigate to the Sample Web UI using localhost. http://localhost:4200 Important The Sample Web UI uses HTTP and not HTTPS . Log in to the web portal with the credentials below. Default credentials: Field Value Username standalone Password G@ppm0ym The home page should look like the following. Figure 1: Sample Web UI Home Page Next up \u00b6 Create a CIRA Config","title":"Login to RPS"},{"location":"General/loginToRPS/#before-logging-in","text":"Important Do not skip these steps. It enables the Sample Web UI to connect to the MPS server. Open any modern web browser and navigate to the following link. Because the MPS Server is using self-signed certificates in developer mode, we must proceed past the warning screen for the Sample Web UI to connect. https://[Development-IP-Address]:3000 A warning screen will prompt. Click Advanced and then Proceed to continue to connect to the MPS webserver. Example After clicking proceed, you will see the following text. This is OK. Move on to the next section: Log In. Cannot GET /","title":"Before Logging In"},{"location":"General/loginToRPS/#log-in","text":"Open a new tab in your browser and navigate to the Sample Web UI using localhost. http://localhost:4200 Important The Sample Web UI uses HTTP and not HTTPS . Log in to the web portal with the credentials below. Default credentials: Field Value Username standalone Password G@ppm0ym The home page should look like the following. Figure 1: Sample Web UI Home Page","title":"Log In"},{"location":"General/loginToRPS/#next-up","text":"Create a CIRA Config","title":"Next up"},{"location":"General/manageDevice/","text":"Go back to the Sample Web UI on your development system. Note If you closed the browser or were logged out, follow these steps to reopen it: Navigate to the UI. http://[Development-IP-Address]:3001 Log in with the default credentials. Default credentials: Field Value Username standalone Password G@ppm0ym Click the Devices tab from the menu on the left. Troubleshooting If the activated device is not listed or if it is listed as unconnected, try restarting the AMT device. After succesfully restarting the device, refresh the WebUI to see if the Status changes to connected . Click on your connected device. Select an action to perform from the options in the top-right. Note If activated into Client Control Mode(CCM), the KVM and SOL features will not function in the current release. To use KVM/SOL, follow the ACM Activation Tutorial to see how to configure a device into Admin Control Mode. Note Activated in Admin Control Mode already? Try out the Keyboard, Video, Mouse (KVM) feature to remotely view and control the AMT device. Issue a Reset to BIOS command and be able to view and make live changes to BIOS settings. Next steps \u00b6 After successfully deploying the Open AMT Cloud Toolkit microservices and client, explore other tools and topics in the Open AMT Cloud Toolkit architecture: REST API Calls \u00b6 Use the REST API tutorial to construct an Admin method API call to connected devices using node.js. Then modify the template to create other MPS REST API calls. Get Started with REST API Calls UI Toolkit \u00b6 Explore the Open AMT Cloud Toolkit reference implementation console by adding manageability features with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit Security \u00b6 Learn how to use the Open AMT Cloud Toolkit architecture to secure assets. Topics include credentials, allowlisting, best known security methods, and more. Learn More about Security and Hardening","title":"Manage AMT Device"},{"location":"General/manageDevice/#next-steps","text":"After successfully deploying the Open AMT Cloud Toolkit microservices and client, explore other tools and topics in the Open AMT Cloud Toolkit architecture:","title":"Next steps"},{"location":"General/manageDevice/#rest-api-calls","text":"Use the REST API tutorial to construct an Admin method API call to connected devices using node.js. Then modify the template to create other MPS REST API calls. Get Started with REST API Calls","title":"REST API Calls"},{"location":"General/manageDevice/#ui-toolkit","text":"Explore the Open AMT Cloud Toolkit reference implementation console by adding manageability features with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit","title":"UI Toolkit"},{"location":"General/manageDevice/#security","text":"Learn how to use the Open AMT Cloud Toolkit architecture to secure assets. Topics include credentials, allowlisting, best known security methods, and more. Learn More about Security and Hardening","title":"Security"},{"location":"Kubernetes/kubernetes/","text":"Introduction \u00b6 Important Not for production use!! This guide explains how to deploy the Open AMT Cloud Toolkit services in Microsoft Azure . Scaling functionality in MPS enables Open AMT Cloud Toolkit to support a greater number of managed devices. For this deployment, kubernetes runs in Microsoft Azure along with redis and consul. Redis is used to sync the Web Server sessions between Web Server instances. Consul is used to communicate device connections between the Web Server and MPS server. High level Design \u00b6 Figure 1: MPS Scaling Architecture \u00b6 Figure 1 presents the high-level architecture of MPS scaling mode. Per the figure, starting at the bottom: Devices connect to an available MPS Server through the load balancer. The REST API requests are routed to an available Web Server, a component of MPS running in scale mode, through a load balancer. The Web Server determines which MPS Server to route the traffic to based on which MPS Server the device is connected to and sends that traffic through the MPS Proxy connection. The MPS Server sends the traffic to the corresponding device. MPS Configuration \u00b6 To support running the service in a distributed environment, some configuration settings were added to MPS. These settings can be modified in open-amt-cloud-toolkit\\scripts\\kubernetes\\serversChart\\values.yaml . All the following settings have already been preset in the values.yaml file. Table 1: MPS configuration settings \u00b6 Component: Setting: Notes: consul distributed_kv_name name of key/value store used. distributed_kv_ip ip of key value store distributed_kv_port port used by key/value store redis redis_enable enable redis caching for web session redis_host redis host redis_port redis port redis_password password used to authenticate to redis general web_proxy_port port the web server used to communicate to MPS. network_adaptor network identifier used when device connects to MPS. Can be either an adaptor name such as eth0 or starting ip address such as 192.168 . startup_mode microservice run mode. standalone when running in non scaling mode or run components in mps and web for distributated mode. Get the Toolkit \u00b6 To clone the repositories: Open a Command Prompt or Terminal and navigate to a directory of your choice for development: git clone --recursive https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit Building the docker images \u00b6 Please build and push the following images from the following open-amt-cloud-toolkit repositories MPS, RPS, and sample-web-ui into a public repository. Please update \"docker.io/vprodemo\" to the desired public repository and \"mps\" to the corresponding repository name. docker build . -t docker.io/vprodemo/mps:latest docker push docker.io/vprodemo/mps:latest Prerequisite \u00b6 Install required software in Windows environment(in admin mode): Run \\open-amt-cloud-toolkit\\scripts\\kubernetes\\installchoco.bat to install the choco package manager Close and reopen command window Run \\open-amt-cloud-toolkit\\scripts\\kubernetes\\installpackages.bat to install the required packages Steps to Deploy \u00b6 Edit entries in the launch.bat file to fit deployment. Update section images in stack environmental variables in open-amt-cloud-toolkit\\scripts\\kubernetes\\serversChart\\values.yaml that correspond with desired images for launch. If containers are in a private container registry, a base64 auth token needs to be created and placed in open-amt-cloud-toolkit\\scripts\\kubernetes\\config.json Launch with command launch.bat [resourceGroupName] [replace the resourceGroupName with the desired resource group name for the deployment] Use the settings in the \\open-amt-cloud-toolkit\\scripts\\kubernetes\\.env file to update the values in \\open-amt-cloud-toolkit\\scripts\\kubernetes\\serversChart\\values.yaml From \\open-amt-cloud-toolkit\\scripts\\kubernetes run helm install openamtcloudstack ./serversChart to deploy the services into kubernetes. After deployment is complete use the command kubectl get pods to verify all pods have been launched successfully. Note Please restore values.yaml to its prelaunch condition before subsiquesnt deployments","title":"Kubernetes"},{"location":"Kubernetes/kubernetes/#introduction","text":"Important Not for production use!! This guide explains how to deploy the Open AMT Cloud Toolkit services in Microsoft Azure . Scaling functionality in MPS enables Open AMT Cloud Toolkit to support a greater number of managed devices. For this deployment, kubernetes runs in Microsoft Azure along with redis and consul. Redis is used to sync the Web Server sessions between Web Server instances. Consul is used to communicate device connections between the Web Server and MPS server.","title":"Introduction"},{"location":"Kubernetes/kubernetes/#high-level-design","text":"","title":"High level Design"},{"location":"Kubernetes/kubernetes/#figure-1-mps-scaling-architecture","text":"Figure 1 presents the high-level architecture of MPS scaling mode. Per the figure, starting at the bottom: Devices connect to an available MPS Server through the load balancer. The REST API requests are routed to an available Web Server, a component of MPS running in scale mode, through a load balancer. The Web Server determines which MPS Server to route the traffic to based on which MPS Server the device is connected to and sends that traffic through the MPS Proxy connection. The MPS Server sends the traffic to the corresponding device.","title":"Figure 1: MPS Scaling Architecture"},{"location":"Kubernetes/kubernetes/#mps-configuration","text":"To support running the service in a distributed environment, some configuration settings were added to MPS. These settings can be modified in open-amt-cloud-toolkit\\scripts\\kubernetes\\serversChart\\values.yaml . All the following settings have already been preset in the values.yaml file.","title":"MPS Configuration"},{"location":"Kubernetes/kubernetes/#table-1-mps-configuration-settings","text":"Component: Setting: Notes: consul distributed_kv_name name of key/value store used. distributed_kv_ip ip of key value store distributed_kv_port port used by key/value store redis redis_enable enable redis caching for web session redis_host redis host redis_port redis port redis_password password used to authenticate to redis general web_proxy_port port the web server used to communicate to MPS. network_adaptor network identifier used when device connects to MPS. Can be either an adaptor name such as eth0 or starting ip address such as 192.168 . startup_mode microservice run mode. standalone when running in non scaling mode or run components in mps and web for distributated mode.","title":"Table 1: MPS configuration settings"},{"location":"Kubernetes/kubernetes/#get-the-toolkit","text":"To clone the repositories: Open a Command Prompt or Terminal and navigate to a directory of your choice for development: git clone --recursive https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit","title":"Get the Toolkit"},{"location":"Kubernetes/kubernetes/#building-the-docker-images","text":"Please build and push the following images from the following open-amt-cloud-toolkit repositories MPS, RPS, and sample-web-ui into a public repository. Please update \"docker.io/vprodemo\" to the desired public repository and \"mps\" to the corresponding repository name. docker build . -t docker.io/vprodemo/mps:latest docker push docker.io/vprodemo/mps:latest","title":"Building the docker images"},{"location":"Kubernetes/kubernetes/#prerequisite","text":"Install required software in Windows environment(in admin mode): Run \\open-amt-cloud-toolkit\\scripts\\kubernetes\\installchoco.bat to install the choco package manager Close and reopen command window Run \\open-amt-cloud-toolkit\\scripts\\kubernetes\\installpackages.bat to install the required packages","title":"Prerequisite"},{"location":"Kubernetes/kubernetes/#steps-to-deploy","text":"Edit entries in the launch.bat file to fit deployment. Update section images in stack environmental variables in open-amt-cloud-toolkit\\scripts\\kubernetes\\serversChart\\values.yaml that correspond with desired images for launch. If containers are in a private container registry, a base64 auth token needs to be created and placed in open-amt-cloud-toolkit\\scripts\\kubernetes\\config.json Launch with command launch.bat [resourceGroupName] [replace the resourceGroupName with the desired resource group name for the deployment] Use the settings in the \\open-amt-cloud-toolkit\\scripts\\kubernetes\\.env file to update the values in \\open-amt-cloud-toolkit\\scripts\\kubernetes\\serversChart\\values.yaml From \\open-amt-cloud-toolkit\\scripts\\kubernetes run helm install openamtcloudstack ./serversChart to deploy the services into kubernetes. After deployment is complete use the command kubectl get pods to verify all pods have been launched successfully. Note Please restore values.yaml to its prelaunch condition before subsiquesnt deployments","title":"Steps to Deploy"},{"location":"Local/installMPS/","text":"The Open Active Management Technology (AMT) Cloud Toolkit repository includes: Management Presence Server (MPS) Remote Provisioning Server (RPS) UI Toolkit Remote Provisioning Client (RPC) Find details about architectural details, security issues, and more in Microservices . Network, Hardware, and Software Prerequisites \u00b6 Before installing the toolkit, prepare the environment: Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer One or more Intel vPro\u00ae device(s) to manage Tip A flash drive or equivalent means of transfer is necessary to copy the RPC to the managed device. Info Both development systems and managed devices must use a wired (i.e., cable) connection on the same network. Install the prerequisite software on the development system: Prerequisite Software Purpose git Downloads the OpenAMT Cloud Toolkit repository Node.js* LTS 12.x.x or newer Installs and runs the software Download and Configure Software \u00b6 To download the Open AMT Cloud Toolkit repository on the development system: Open a Terminal (Linux) or Powershell command prompt (Windows) and navigate to a directory of your choice for development. Clone the repository. git clone --recursive --branch v1.2.0 https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit Change to the cloned open-amt-cloud-toolkit directory. cd open-amt-cloud-toolkit Run the following script to build and install the services. Linux make build Windows (Powershell) ./ build . ps1 Troubleshooting If it is your first time running a local script in Powershell, it may prevent it from executing. To fix this, run the following command first. set-executionpolicy remotesigned Provide the IP Address of your development system and press Enter. Info Make sure to enter the IP Address of the development system , not that of any managed devices. The script will update the ./mps/.mpsrc file and the ./sample-web-ui/src/environments/environment.ts file with the IP address you enter. It will also run npm install for each service to install the necessary dependencies. For more information on all available configuration options for MPS click here and for RPS click here . All dependencies for MPS, RPS, and the Web UI have now been installed and configured. To learn more about each component and their role click here . Start the MPS, RPS, and Sample Web UI \u00b6 Start the MPS, RPS, and Sample Web UI in three separate command line terminals. To start the MPS: Navigate to the mps directory. Start the MPS server. It may take approximately 2-3 minutes to start. Linux cd mps && npm run devx Windows (Powershell) Change directory. cd mps Start the MPS server. npm run dev Success The development system's IP Address will be used to connect to the web server. By default, the web server (api) runs on port 3000 and the MPS Server listens on port 4433. Figure 1: MPS reports successful deployment. To start the RPS: Open a new Terminal or Command Prompt and navigate to the open-amt-cloud-toolkit/rps directory. Start the RPS server. Linux cd rps && npm run devx Windows (Powershell) Change directory. cd rps Start the RPS server. npm run dev Success By default, the RPS web port is 8080 and the RPS Server listens on port 8081. Figure 2: RPS reports successful deployment. To start the Sample Web UI: Open a new Terminal or Command Prompt. Navigate to the open-amt-cloud-toolkit/sample-web-ui directory. cd sample-web-ui Start the Sample Web UI server. npm start Success By default, the Sample Web UI will use port 4200. Figure 3: Sample UI reports successful deployment. Next up \u00b6 Login to RPS","title":"Express Manual Setup"},{"location":"Local/installMPS/#network-hardware-and-software-prerequisites","text":"Before installing the toolkit, prepare the environment: Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer One or more Intel vPro\u00ae device(s) to manage Tip A flash drive or equivalent means of transfer is necessary to copy the RPC to the managed device. Info Both development systems and managed devices must use a wired (i.e., cable) connection on the same network. Install the prerequisite software on the development system: Prerequisite Software Purpose git Downloads the OpenAMT Cloud Toolkit repository Node.js* LTS 12.x.x or newer Installs and runs the software","title":"Network, Hardware, and Software Prerequisites"},{"location":"Local/installMPS/#download-and-configure-software","text":"To download the Open AMT Cloud Toolkit repository on the development system: Open a Terminal (Linux) or Powershell command prompt (Windows) and navigate to a directory of your choice for development. Clone the repository. git clone --recursive --branch v1.2.0 https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit Change to the cloned open-amt-cloud-toolkit directory. cd open-amt-cloud-toolkit Run the following script to build and install the services. Linux make build Windows (Powershell) ./ build . ps1 Troubleshooting If it is your first time running a local script in Powershell, it may prevent it from executing. To fix this, run the following command first. set-executionpolicy remotesigned Provide the IP Address of your development system and press Enter. Info Make sure to enter the IP Address of the development system , not that of any managed devices. The script will update the ./mps/.mpsrc file and the ./sample-web-ui/src/environments/environment.ts file with the IP address you enter. It will also run npm install for each service to install the necessary dependencies. For more information on all available configuration options for MPS click here and for RPS click here . All dependencies for MPS, RPS, and the Web UI have now been installed and configured. To learn more about each component and their role click here .","title":"Download and Configure Software"},{"location":"Local/installMPS/#start-the-mps-rps-and-sample-web-ui","text":"Start the MPS, RPS, and Sample Web UI in three separate command line terminals. To start the MPS: Navigate to the mps directory. Start the MPS server. It may take approximately 2-3 minutes to start. Linux cd mps && npm run devx Windows (Powershell) Change directory. cd mps Start the MPS server. npm run dev Success The development system's IP Address will be used to connect to the web server. By default, the web server (api) runs on port 3000 and the MPS Server listens on port 4433. Figure 1: MPS reports successful deployment. To start the RPS: Open a new Terminal or Command Prompt and navigate to the open-amt-cloud-toolkit/rps directory. Start the RPS server. Linux cd rps && npm run devx Windows (Powershell) Change directory. cd rps Start the RPS server. npm run dev Success By default, the RPS web port is 8080 and the RPS Server listens on port 8081. Figure 2: RPS reports successful deployment. To start the Sample Web UI: Open a new Terminal or Command Prompt. Navigate to the open-amt-cloud-toolkit/sample-web-ui directory. cd sample-web-ui Start the Sample Web UI server. npm start Success By default, the Sample Web UI will use port 4200. Figure 3: Sample UI reports successful deployment.","title":"Start the MPS, RPS, and Sample Web UI"},{"location":"Local/installMPS/#next-up","text":"Login to RPS","title":"Next up"},{"location":"Local/installRPS/","text":"The Remote Provisioning Service (RPS) is a microservice based on Node.js*. The RPS works with the Remote Provisioning Client (RPC) to activate Intel\u00ae AMT platforms using a pre-defined profile. Figure 1 illustrates where RPS fits into the overall microservice architecture. Figure 1: Deploy Remote Provisioning Server (RPS) on a development system. Clone OpenAMT Cloud Toolkit \u00b6 To clone the repositories: Note: Skip this step if the repositories are already cloned. Open a Command Prompt or Terminal and navigate to a directory of your choice for development. git clone --recursive https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit Navigate to the rps directory cd open-amt-cloud-toolkit \\r ps Warning Do not nest a microservice directory inside another microservice directory. The source code contains relative paths. The correct directory structure appears below, where parent is your installation directory. \ud83d\udce6parent \u2523 \ud83d\udcc2mps \u2517 \ud83d\udcc2rps Start the RPS Server \u00b6 To start the RPS: In the rps directory, run the install command to install all required dependencies. npm install Then, start the server. By default, the RPS web port is 8080. npm run dev Note Warning messages are okay and expected for optional dependencies. Example Output: Figure 2: RPS reports successful deployment. Next up \u00b6 Login to RPS","title":"installRPS"},{"location":"Local/installRPS/#clone-openamt-cloud-toolkit","text":"To clone the repositories: Note: Skip this step if the repositories are already cloned. Open a Command Prompt or Terminal and navigate to a directory of your choice for development. git clone --recursive https://github.com/open-amt-cloud-toolkit/open-amt-cloud-toolkit Navigate to the rps directory cd open-amt-cloud-toolkit \\r ps Warning Do not nest a microservice directory inside another microservice directory. The source code contains relative paths. The correct directory structure appears below, where parent is your installation directory. \ud83d\udce6parent \u2523 \ud83d\udcc2mps \u2517 \ud83d\udcc2rps","title":"Clone OpenAMT Cloud Toolkit"},{"location":"Local/installRPS/#start-the-rps-server","text":"To start the RPS: In the rps directory, run the install command to install all required dependencies. npm install Then, start the server. By default, the RPS web port is 8080. npm run dev Note Warning messages are okay and expected for optional dependencies. Example Output: Figure 2: RPS reports successful deployment.","title":"Start the RPS Server"},{"location":"Local/installRPS/#next-up","text":"Login to RPS","title":"Next up"},{"location":"Local/overview/","text":"Build and Deploy Microservices Locally \u00b6 This section contains instructions for deploying the Open AMT Cloud Toolkit's Management Presence Server (MPS) and Remote Provisioning Server (RPS) on a local development system. These Hello World deployment instructions detail how to install the microservices manually on a development system and are not intended as production environment instructions. Figure 1: Deploy microservices on a local development system. What You'll Need \u00b6 Hardware \u00b6 Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer At least one Intel vPro\u00ae device to manage A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network. Development System Software \u00b6 Before MPS and RPS installation, install the following software: git Node.js* LTS 12.x.x or newer What You'll Do \u00b6 To complete a Hello World microservice deployment: Install MPS Locally Install RPS Locally Login and Configure RPS Build RPC Copy RPC to a Managed Device To connect the managed device: Run RPC on a Managed Device Manage the Device with MPS These sections include instructions for Windows and Linux environments. Run instructions in a terminal window, the Windows Command Prompt in Administrator mode or the Linux shell/terminal. Estimated completion time: 15 minutes Next up \u00b6 Install MPS Locally","title":"Manual Overview"},{"location":"Local/overview/#build-and-deploy-microservices-locally","text":"This section contains instructions for deploying the Open AMT Cloud Toolkit's Management Presence Server (MPS) and Remote Provisioning Server (RPS) on a local development system. These Hello World deployment instructions detail how to install the microservices manually on a development system and are not intended as production environment instructions. Figure 1: Deploy microservices on a local development system.","title":"Build and Deploy Microservices Locally"},{"location":"Local/overview/#what-youll-need","text":"","title":"What You'll Need"},{"location":"Local/overview/#hardware","text":"Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer At least one Intel vPro\u00ae device to manage A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network.","title":"Hardware"},{"location":"Local/overview/#development-system-software","text":"Before MPS and RPS installation, install the following software: git Node.js* LTS 12.x.x or newer","title":"Development System Software"},{"location":"Local/overview/#what-youll-do","text":"To complete a Hello World microservice deployment: Install MPS Locally Install RPS Locally Login and Configure RPS Build RPC Copy RPC to a Managed Device To connect the managed device: Run RPC on a Managed Device Manage the Device with MPS These sections include instructions for Windows and Linux environments. Run instructions in a terminal window, the Windows Command Prompt in Administrator mode or the Linux shell/terminal. Estimated completion time: 15 minutes","title":"What You'll Do"},{"location":"Local/overview/#next-up","text":"Install MPS Locally","title":"Next up"},{"location":"Microservices/overview/","text":"Figure 1 illustrates the high-level architecture of Open Active Management Technology (AMT) Cloud Toolkit microservice architecture . Figure 1: Deploy Management Presence Server (MPS) and the Remote Provisioning Server (RPS) on a development system. As shown in Figure 1, the architecture consists of five components: MPS - A microservice that uses an Intel vPro\u00ae platform feature, Client Initiated Remote Access (CIRA), for enabling edge, cloud devices to maintain a persistent connection for out-of-band manageability features, such as power control or Keyboard, Video, and Mouse (KVM) control. RPS - A microservice that activates Intel\u00ae Active Management Technology (AMT) using predefined profiles and connects them to the MPS for manageability use cases. RPC - A lightweight client application that communicates with the RPS server to activate Intel\u00ae AMT. UI Toolkit - A toolkit that includes prebuilt React components and a reference implementation web console. The React-based snippets simplify the task of adding complex manageability-related UI controls, such as the KVM, to a console. Sample Web UI - A web based UI that demonstrates how to use the UI Toolkit. It also provides a way to interact with the microservices and to help provide context as to how each microservice is used. Out-of-band Management (OOBM) \u00b6 Open AMT Cloud Toolkit uses remote management technology, also known as out-of-band management (OOBM) , to allow administrators to perform actions on network assets or devices using a secure alternative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, Open AMT Cloud Toolkit software can perform remote management, including powering up as a system that is currently powered down. Remote management can offer potential cost-savings by decreasing the need for in-person technician visits to remote IT sites and reducing downtime. What's the difference between in-band and out-of-band management? \u00b6 Remote monitoring and management software solutions often require the managed devices to be in the powered on state. The IT administrator connects to and updates the managed device while it is in the powered on state. With out-of-band management, the administrator can connect to the device when it has been powered down or it is unresponsive. CIRA Configuration \u00b6 CIRA enables OOB connections between Intel\u00ae AMT platforms and administrative development systems running Open AMT on the same network. The following steps occur via a CIRA channel: A remote Intel vPro\u00ae platform featuring Intel\u00ae AMT is activated and a CIRA configuration is applied. The remote platform is referred to as the managed device. The managed device connects to the MPS and establishes an encrypted connection using Transport Layer Security (TLS) The Intel vPro\u00ae platform maintains a long standing connection with the MPS through the use of small keep-alive messages to the MPS. A management console sends a command to the MPS, via provided RESTful interfaces, with the command indicating the managed device should take some action. The MPS authenticates the RESTful command and proxies the command for the management console to the managed device. The MPS handles the authentication process with the managed device. Control Mode Profile \u00b6 Managed devices featuring Intel\u00ae AMT support two control modes: Admin Control Mode (ACM): In this mode, there are no limitations to Intel\u00ae AMT functionality. This reflects the higher level of trust associated with these setup methods. No user consent is required. Client Control Mode (CCM): This mode limits some of Intel\u00ae AMT functionality, reflecting the lower level of trust. Features requiring User Consent: Keyboard, Video, Mouse (KVM) Control IDE-Redirection for sharing and mounting images remotely Domains \u00b6 In addition to a CIRA Config and an ACM AMT Profile, ACM requires the creation of a Domain profile. Intel\u00ae AMT checks the network DNS suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. Intel\u00ae AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority. Power Control \u00b6 With the established CIRA channel, Open AMT Cloud Toolkit enables the administrator to manage remote devices and trigger power actions to: power up power down power up to BIOS reset reset to BIOS For more information about power states supported by the REST APIs, see Intel\u00ae AMT Implementation and Reference Guide for more details. Keyboard, Video, Mouse (KVM) Control \u00b6 Intel\u00ae AMT enables remote management of a device, even when the OS isn't running, through KVM over IP support. No additional equipment is needed for this feature. With KVM control, IT administrators can access and update PCs and devices as if they were onsite. It eliminates the need for remote KVM switches and other hardware.","title":"Overview"},{"location":"Microservices/overview/#out-of-band-management-oobm","text":"Open AMT Cloud Toolkit uses remote management technology, also known as out-of-band management (OOBM) , to allow administrators to perform actions on network assets or devices using a secure alternative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, Open AMT Cloud Toolkit software can perform remote management, including powering up as a system that is currently powered down. Remote management can offer potential cost-savings by decreasing the need for in-person technician visits to remote IT sites and reducing downtime.","title":"Out-of-band Management (OOBM)"},{"location":"Microservices/overview/#whats-the-difference-between-in-band-and-out-of-band-management","text":"Remote monitoring and management software solutions often require the managed devices to be in the powered on state. The IT administrator connects to and updates the managed device while it is in the powered on state. With out-of-band management, the administrator can connect to the device when it has been powered down or it is unresponsive.","title":"What's the difference between in-band and out-of-band management?"},{"location":"Microservices/overview/#cira-configuration","text":"CIRA enables OOB connections between Intel\u00ae AMT platforms and administrative development systems running Open AMT on the same network. The following steps occur via a CIRA channel: A remote Intel vPro\u00ae platform featuring Intel\u00ae AMT is activated and a CIRA configuration is applied. The remote platform is referred to as the managed device. The managed device connects to the MPS and establishes an encrypted connection using Transport Layer Security (TLS) The Intel vPro\u00ae platform maintains a long standing connection with the MPS through the use of small keep-alive messages to the MPS. A management console sends a command to the MPS, via provided RESTful interfaces, with the command indicating the managed device should take some action. The MPS authenticates the RESTful command and proxies the command for the management console to the managed device. The MPS handles the authentication process with the managed device.","title":"CIRA Configuration"},{"location":"Microservices/overview/#control-mode-profile","text":"Managed devices featuring Intel\u00ae AMT support two control modes: Admin Control Mode (ACM): In this mode, there are no limitations to Intel\u00ae AMT functionality. This reflects the higher level of trust associated with these setup methods. No user consent is required. Client Control Mode (CCM): This mode limits some of Intel\u00ae AMT functionality, reflecting the lower level of trust. Features requiring User Consent: Keyboard, Video, Mouse (KVM) Control IDE-Redirection for sharing and mounting images remotely","title":"Control Mode Profile"},{"location":"Microservices/overview/#domains","text":"In addition to a CIRA Config and an ACM AMT Profile, ACM requires the creation of a Domain profile. Intel\u00ae AMT checks the network DNS suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. Intel\u00ae AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority.","title":"Domains"},{"location":"Microservices/overview/#power-control","text":"With the established CIRA channel, Open AMT Cloud Toolkit enables the administrator to manage remote devices and trigger power actions to: power up power down power up to BIOS reset reset to BIOS For more information about power states supported by the REST APIs, see Intel\u00ae AMT Implementation and Reference Guide for more details.","title":"Power Control"},{"location":"Microservices/overview/#keyboard-video-mouse-kvm-control","text":"Intel\u00ae AMT enables remote management of a device, even when the OS isn't running, through KVM over IP support. No additional equipment is needed for this feature. With KVM control, IT administrators can access and update PCs and devices as if they were onsite. It eliminates the need for remote KVM switches and other hardware.","title":"Keyboard, Video, Mouse (KVM) Control"},{"location":"Microservices/MPS/configuration/","text":"MPS Configuration Options \u00b6 Environment Variable Default Description MPS_IMAGE mps-microservice:v1 Only used when using docker-compose.yml. Specifies image to use for MPS MPS_USE_VAULT true Whether or not the vault should be used MPS_VAULT_ADDRESS http://vault:8200 Address of where the vault is hosted MPS_VAULT_TOKEN myroot Token used to access the vault MPS_SECRETS_PATH secret/data/ Path to where secrets are stored in the vault MPS_NODE_ENV dev Node Environment. Set to PRODUCTION when ready to deploy to production MPS_GENERATE_CERTS true Enables/Disables generation of self signed certificates based on MPS_COMMON_NAME MPS_COMMON_NAME localhost Development system's IP address. Note: For this guide, you cannot use localhost because the managed device would be unable to reach the MPS and RPS servers. MPS_USE_ALLOWLIST true A value of false disables the allowlist functionality. For information about allowlist, see the allowlist tutorial MPS_PORT 4433 MPS_WEB_PORT 3000 MPS_USERNAME standalone Specifies the username client devices use to connect to MPS MPS_PASS G@ppm0ym Specifies the password client devices use to connect to MPS MPS_USE_GLOBAL_CREDENTIALS true Each device can have its own MPS username and password. If this flag is enabled in MPS, it will use the same username and password as specified my MPS_USER and MPS_PASSWORD for all devices MPS_ENABLE_LOGGING true MPS_DEBUG true MPS_WEB_ADMIN_USER standalone Specifies the username for API authentication MPS_WEB_ADMIN_PASSWORD G@ppm0ym Specifies the password for API authentication MPS_HTTPS true Specifies whether or not to enable https MPS_MPSXAPIKEY APIKEYFORMPS123! RESTful API Header Key. This header must be present on all RESTful calls made against MPS MPS_LISTEN_ANY true MPS_TLS_OFFLOAD false MPS_SESSION_ENCRYPTION_KEY MPS_LOG_LEVEL info Controls the level of logging provided in the service. Options are (in order of increasing detail): error , warn , info , verbose , debug MPS_AUTH_ENABLED false MPS_CORS_ORIGIN http://localhost:3001 The domain/origin that is allowed to make requests against this service MPS_CORS_HEADERS Origin, X-Requested-With, Accept, X-MPS-API-Key,x-rps-api-key, Content-Type, csrf-token, authorization List of accepted HTTP Headers MPS_CORS_METHODS * List of HTTP Methods that are allowed MPS_CORS_ALLOW_CREDENTIALS true Controls whether or not session credentials can be send","title":"Configuration"},{"location":"Microservices/MPS/configuration/#mps-configuration-options","text":"Environment Variable Default Description MPS_IMAGE mps-microservice:v1 Only used when using docker-compose.yml. Specifies image to use for MPS MPS_USE_VAULT true Whether or not the vault should be used MPS_VAULT_ADDRESS http://vault:8200 Address of where the vault is hosted MPS_VAULT_TOKEN myroot Token used to access the vault MPS_SECRETS_PATH secret/data/ Path to where secrets are stored in the vault MPS_NODE_ENV dev Node Environment. Set to PRODUCTION when ready to deploy to production MPS_GENERATE_CERTS true Enables/Disables generation of self signed certificates based on MPS_COMMON_NAME MPS_COMMON_NAME localhost Development system's IP address. Note: For this guide, you cannot use localhost because the managed device would be unable to reach the MPS and RPS servers. MPS_USE_ALLOWLIST true A value of false disables the allowlist functionality. For information about allowlist, see the allowlist tutorial MPS_PORT 4433 MPS_WEB_PORT 3000 MPS_USERNAME standalone Specifies the username client devices use to connect to MPS MPS_PASS G@ppm0ym Specifies the password client devices use to connect to MPS MPS_USE_GLOBAL_CREDENTIALS true Each device can have its own MPS username and password. If this flag is enabled in MPS, it will use the same username and password as specified my MPS_USER and MPS_PASSWORD for all devices MPS_ENABLE_LOGGING true MPS_DEBUG true MPS_WEB_ADMIN_USER standalone Specifies the username for API authentication MPS_WEB_ADMIN_PASSWORD G@ppm0ym Specifies the password for API authentication MPS_HTTPS true Specifies whether or not to enable https MPS_MPSXAPIKEY APIKEYFORMPS123! RESTful API Header Key. This header must be present on all RESTful calls made against MPS MPS_LISTEN_ANY true MPS_TLS_OFFLOAD false MPS_SESSION_ENCRYPTION_KEY MPS_LOG_LEVEL info Controls the level of logging provided in the service. Options are (in order of increasing detail): error , warn , info , verbose , debug MPS_AUTH_ENABLED false MPS_CORS_ORIGIN http://localhost:3001 The domain/origin that is allowed to make requests against this service MPS_CORS_HEADERS Origin, X-Requested-With, Accept, X-MPS-API-Key,x-rps-api-key, Content-Type, csrf-token, authorization List of accepted HTTP Headers MPS_CORS_METHODS * List of HTTP Methods that are allowed MPS_CORS_ALLOW_CREDENTIALS true Controls whether or not session credentials can be send","title":"MPS Configuration Options"},{"location":"Microservices/MPS/securityMPS/","text":"MPS Security Considerations \u00b6 Management Presence Server (MPS) is a cloud agnostic micro-service that enables Intel\u00ae AMT-based platforms connecting over the internet to connect securely to manageability consoles. In order for a client to securely perform actions on Intel\u00ae AMT devices using REST APIs, MPS uses secrets. There are six key assets that must be protected: Intel\u00ae AMT credentials Intel\u00ae MPS credentials Device Allowlist (List of UUIDs) APIKey Server Configuration Web User Credentials In addition to the above assets, there are best practices that are recommended to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets. Security Assets \u00b6 1. Intel\u00ae AMT credentials \u00b6 AMT credentials allows a user to remotely control Intel\u00ae AMT device and these credentials are configured in AMT Firmware. When user performs an action on the device using REST API, MPS then fetches corresponding credentials of that device from Vault and uses it as part of digest authentication. It is highly recommended to use strong password (as per AMT password requirements) and also, unique passwords per device to make it more secure. 2. Intel\u00ae MPS credentials \u00b6 Every Intel\u00ae device needs to be authenticated prior to successful connection to MPS. MPS credentials are used to authenticate every Intel\u00ae device. After establishing TLS connection with MPS, device sends it's username and password, which will then be used to authenticate. It is highly recommended that every device use a unique username and password. 3. Device Allowlist (List of UUIDs) \u00b6 Each Intel\u00ae AMT device has a unique identifier (UUID) assigned to it and this UUID is assigned by Original Equipment Manufacturer (OEM). As discussed above, devices are authenticated by MPS using MPS credentials. But even before validating credentials, only allowlist Intel\u00ae AMT devices can be allowed to connect to make it more secure and this is being done using the allowlist UUID. When Vault is being used to store device credentials, this list of devices is also the allowlist. 4. APIKey \u00b6 Every client/user needs to be authenticated before allowing them to perform an action using REST API call. APIKey will be used by MPS to authenticate a client/user. 5. Server Configuration \u00b6 In order for MPS to use secure protocols, we will have to configure certificates, and the keys for these certificates need to be securely stored. If the keys are compromised then the attacker will be able to decrypt all the messages. 6. Web User Credentials \u00b6 Primary way of authenticating a user who intends to perform an action is using APIKey but MPS also provides a sample Web-based User Interface. This Web Interface shows how to make REST API calls using AJAX. Only authenticated users should be allowed to make REST API calls using Web UI and the authentication will be done using Web user credentials. Best Known Security Methods \u00b6 1. Enable TLS on network connections \u00b6 There are three potential places where TLS should be enabled to protect the security assets: HTTP/WS connection between Web UI and MPS Connection between MPS and Vault Connection between MPS and Intel\u00ae AMT device (This is done automatically with default deployments) Encrypting these communication will help prevent network based attacks attempting to control Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections. 2. Secure and isolate execution environment \u00b6 MPS holds the described security assets in memory during execution. In order to protect these assets while in memory of MPS, it is recommended that MPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing the assets while in memory. 3. Utilize Vault for storing Credentials \u00b6 Vault is a tool used to secure, store, and tightly control access to secrets. Utilizing Vault to store passwords used by MPS will greatly increase the security of these assets. 4. Utilize Kubernetes Secrets for storing dynamic configuration values (like environment variables) \u00b6 Kubernetes Secrets help you to store and manage sensitive information like Tokens. Use Kubernetes secrets for storing environment variables required for configuring MPS rather than putting them in the image/pod. Vault token, Session secret key, and Server configuration assets required for MPS should be stored in Kubernetes secrets.","title":"Security Information"},{"location":"Microservices/MPS/securityMPS/#mps-security-considerations","text":"Management Presence Server (MPS) is a cloud agnostic micro-service that enables Intel\u00ae AMT-based platforms connecting over the internet to connect securely to manageability consoles. In order for a client to securely perform actions on Intel\u00ae AMT devices using REST APIs, MPS uses secrets. There are six key assets that must be protected: Intel\u00ae AMT credentials Intel\u00ae MPS credentials Device Allowlist (List of UUIDs) APIKey Server Configuration Web User Credentials In addition to the above assets, there are best practices that are recommended to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets.","title":"MPS Security Considerations"},{"location":"Microservices/MPS/securityMPS/#security-assets","text":"","title":"Security Assets"},{"location":"Microservices/MPS/securityMPS/#1-intel-amt-credentials","text":"AMT credentials allows a user to remotely control Intel\u00ae AMT device and these credentials are configured in AMT Firmware. When user performs an action on the device using REST API, MPS then fetches corresponding credentials of that device from Vault and uses it as part of digest authentication. It is highly recommended to use strong password (as per AMT password requirements) and also, unique passwords per device to make it more secure.","title":"1. Intel&reg; AMT credentials"},{"location":"Microservices/MPS/securityMPS/#2-intel-mps-credentials","text":"Every Intel\u00ae device needs to be authenticated prior to successful connection to MPS. MPS credentials are used to authenticate every Intel\u00ae device. After establishing TLS connection with MPS, device sends it's username and password, which will then be used to authenticate. It is highly recommended that every device use a unique username and password.","title":"2. Intel&reg; MPS credentials"},{"location":"Microservices/MPS/securityMPS/#3-device-allowlist-list-of-uuids","text":"Each Intel\u00ae AMT device has a unique identifier (UUID) assigned to it and this UUID is assigned by Original Equipment Manufacturer (OEM). As discussed above, devices are authenticated by MPS using MPS credentials. But even before validating credentials, only allowlist Intel\u00ae AMT devices can be allowed to connect to make it more secure and this is being done using the allowlist UUID. When Vault is being used to store device credentials, this list of devices is also the allowlist.","title":"3. Device Allowlist (List of UUIDs)"},{"location":"Microservices/MPS/securityMPS/#4-apikey","text":"Every client/user needs to be authenticated before allowing them to perform an action using REST API call. APIKey will be used by MPS to authenticate a client/user.","title":"4. APIKey"},{"location":"Microservices/MPS/securityMPS/#5-server-configuration","text":"In order for MPS to use secure protocols, we will have to configure certificates, and the keys for these certificates need to be securely stored. If the keys are compromised then the attacker will be able to decrypt all the messages.","title":"5. Server Configuration"},{"location":"Microservices/MPS/securityMPS/#6-web-user-credentials","text":"Primary way of authenticating a user who intends to perform an action is using APIKey but MPS also provides a sample Web-based User Interface. This Web Interface shows how to make REST API calls using AJAX. Only authenticated users should be allowed to make REST API calls using Web UI and the authentication will be done using Web user credentials.","title":"6. Web User Credentials"},{"location":"Microservices/MPS/securityMPS/#best-known-security-methods","text":"","title":"Best Known Security Methods"},{"location":"Microservices/MPS/securityMPS/#1-enable-tls-on-network-connections","text":"There are three potential places where TLS should be enabled to protect the security assets: HTTP/WS connection between Web UI and MPS Connection between MPS and Vault Connection between MPS and Intel\u00ae AMT device (This is done automatically with default deployments) Encrypting these communication will help prevent network based attacks attempting to control Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections.","title":"1. Enable TLS on network connections"},{"location":"Microservices/MPS/securityMPS/#2-secure-and-isolate-execution-environment","text":"MPS holds the described security assets in memory during execution. In order to protect these assets while in memory of MPS, it is recommended that MPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing the assets while in memory.","title":"2. Secure and isolate execution environment"},{"location":"Microservices/MPS/securityMPS/#3-utilize-vault-for-storing-credentials","text":"Vault is a tool used to secure, store, and tightly control access to secrets. Utilizing Vault to store passwords used by MPS will greatly increase the security of these assets.","title":"3. Utilize Vault for storing Credentials"},{"location":"Microservices/MPS/securityMPS/#4-utilize-kubernetes-secrets-for-storing-dynamic-configuration-values-like-environment-variables","text":"Kubernetes Secrets help you to store and manage sensitive information like Tokens. Use Kubernetes secrets for storing environment variables required for configuring MPS rather than putting them in the image/pod. Vault token, Session secret key, and Server configuration assets required for MPS should be stored in Kubernetes secrets.","title":"4. Utilize Kubernetes Secrets for storing dynamic configuration values (like environment variables)"},{"location":"Microservices/RPC/buildRPC_Manual/","text":"In addition to using GitHub Actions to obtain a binary, the RPC binary can also be manually built. The steps below walk through how to build RPC on Windows\u00ae 10, Ubuntu* (18.04 or 20.04), and CentOS 7/8. Required Software \u00b6 git Additionally, if using Windows\u00ae 10: Microsoft Visual Studio* : 2019 or newer version of Visual Studio Community/Professional Make sure to install the Desktop development with C++ package at time of installation or via the 'Get tools and extensions' menu within Microsoft Visual Studio*. The steps below assume the following directory structure where rpc is the clone of the rpc repository , vcpkg is a clone of the VCPKG tool source and build is the RPC build directory. Both vcpkg and build directories will be created in later steps. \\rpc |__vcpkg |__build Clone the Repository \u00b6 On your development system, navigate to a directory of your choice to clone and build RPC. Clone the RPC repository. git clone --branch v1.1.0 https://github.com/open-amt-cloud-toolkit/rpc.git && cd rpc Install Prerequisites and Build RPC \u00b6 Windows Open 'x64 Native Tools Command Prompt for VS 20XX' on your development system. This is NOT a regular Windows Command Prompt. This specific tool is used for compiling the RPC executable. Build VCPKG and C++ REST SDK In the rpc directory, clone the VCPKG repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .11-1 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command. bootstrap-vcpkg.bat Install C++ REST SDK. This can take anywhere from 8 - 15 minutes depending on download speeds and installation times. vcpkg install cpprestsdk [ websockets ] :x64-windows-static Build RPC Return to the rpc directory and create a new build directory. cd .. && mkdir build && cd build Generate the CMake config. cmake -DVCPKG_TARGET_TRIPLET = x64-windows-static -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake .. Build the RPC executable. cmake --build . --config Release Note RPC can also be built in a non-production debug mode rather than release using the following command. The debug mode includes debug symbols. cmake --build . --config Debug Change to Release directory. cd Release Ubuntu/CentOS 8 The following steps are for Ubuntu 18.04, Ubuntu 20.04, or CentOS8. Build VCPKG and C++ REST SDK To install the required dependencies; enter the following command. Ubuntu sudo apt install git cmake build-essential curl zip unzip tar pkg-config CentOS8 sudo yum install cmake In the rpc directory, clone the Vcpkg repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .11-1 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command. ./bootstrap-vcpkg.sh Install C++ REST SDK. This can take anywhere from 8 - 15 minutes depending on download speeds and installation times. ./vcpkg install cpprestsdk [ websockets ] Build RPC Return to the rpc directory and create a new 'build' directory. cd .. && mkdir build && cd build Generate the CMake config. cmake -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE = Release .. Note RPC can also be built in a non-production debug mode rather than release using the following command. The debug mode includes debug symbols. cmake -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug .. Build the RPC executable. cmake --build . CentOS 7 Important All commands should be executed in the same Terminal. The \"export PATH=...\" (for CMake and Git), and \"scl enable devtoolset-7 bash\" (for GCC) are temporary changes which only affect the current Terminal session. Install Dependencies Download CMake. CMake 3.10.2 is recommended and can be downloaded from here . Other CMake binary versions are available here . ./cmake-3.10.2-Linux-x86_64.sh export PATH = /home/user/Downloads/cmake-3.10.2-Linux-x86_64/bin: $PATH Update GCC toolchain. sudo yum install centos-release-scl sudo yum install devtoolset-7 scl enable devtoolset-7 bash Build Git source control system. sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-develperl-CPAN perl-devel git clone https://github.com/git/git.git make configure make export PATH = /home/user/Downloads/git: $PATH Build VCPKG and C++ REST SDK In the rpc directory, clone the VCPKG repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .11-1 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command. ./bootstrap-vcpkg.sh Install C++ REST SDK. This can take anywhere from 8 - 15 minutes depending on download speeds and installation times. ./vcpkg install cpprestsdk [ websockets ] Build RPC Return to the rpc directory and create a new 'build' directory. cd .. && mkdir build && cd build Generate the CMake config cmake -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE = Release -DNO_SELECT = ON .. Note RPC can also be built in a non-production debug mode rather than release using the following command. The debug mode includes debug symbols. cmake -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug -DNO_SELECT=ON .. Build the RPC executable cmake --build . Run RPC \u00b6 For additional information on possible arguments when invoking RPC, see Command Examples . The following example command shows how to activate and configure an Intel AMT device using a pre-defined profile on your local network. Windows rpc --url wss://localhost:8080 --nocertcheck --cmd \"-t activate --profile profile1\" Note On a Windows\u00ae 10 system, the Command Prompt must be ran as Adminstrator. Linux sudo ./rpc --url wss://localhost:8080 --nocertcheck --cmd \"-t activate --profile profile1\" Note The --nocertcheck flag allows for the use of self-signed certificates for development purposes. Find more information here Example Success Output:","title":"Build & Run RPC (Manual)"},{"location":"Microservices/RPC/buildRPC_Manual/#required-software","text":"git Additionally, if using Windows\u00ae 10: Microsoft Visual Studio* : 2019 or newer version of Visual Studio Community/Professional Make sure to install the Desktop development with C++ package at time of installation or via the 'Get tools and extensions' menu within Microsoft Visual Studio*. The steps below assume the following directory structure where rpc is the clone of the rpc repository , vcpkg is a clone of the VCPKG tool source and build is the RPC build directory. Both vcpkg and build directories will be created in later steps. \\rpc |__vcpkg |__build","title":"Required Software"},{"location":"Microservices/RPC/buildRPC_Manual/#clone-the-repository","text":"On your development system, navigate to a directory of your choice to clone and build RPC. Clone the RPC repository. git clone --branch v1.1.0 https://github.com/open-amt-cloud-toolkit/rpc.git && cd rpc","title":"Clone the Repository"},{"location":"Microservices/RPC/buildRPC_Manual/#install-prerequisites-and-build-rpc","text":"Windows Open 'x64 Native Tools Command Prompt for VS 20XX' on your development system. This is NOT a regular Windows Command Prompt. This specific tool is used for compiling the RPC executable. Build VCPKG and C++ REST SDK In the rpc directory, clone the VCPKG repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .11-1 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command. bootstrap-vcpkg.bat Install C++ REST SDK. This can take anywhere from 8 - 15 minutes depending on download speeds and installation times. vcpkg install cpprestsdk [ websockets ] :x64-windows-static Build RPC Return to the rpc directory and create a new build directory. cd .. && mkdir build && cd build Generate the CMake config. cmake -DVCPKG_TARGET_TRIPLET = x64-windows-static -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake .. Build the RPC executable. cmake --build . --config Release Note RPC can also be built in a non-production debug mode rather than release using the following command. The debug mode includes debug symbols. cmake --build . --config Debug Change to Release directory. cd Release Ubuntu/CentOS 8 The following steps are for Ubuntu 18.04, Ubuntu 20.04, or CentOS8. Build VCPKG and C++ REST SDK To install the required dependencies; enter the following command. Ubuntu sudo apt install git cmake build-essential curl zip unzip tar pkg-config CentOS8 sudo yum install cmake In the rpc directory, clone the Vcpkg repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .11-1 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command. ./bootstrap-vcpkg.sh Install C++ REST SDK. This can take anywhere from 8 - 15 minutes depending on download speeds and installation times. ./vcpkg install cpprestsdk [ websockets ] Build RPC Return to the rpc directory and create a new 'build' directory. cd .. && mkdir build && cd build Generate the CMake config. cmake -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE = Release .. Note RPC can also be built in a non-production debug mode rather than release using the following command. The debug mode includes debug symbols. cmake -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug .. Build the RPC executable. cmake --build . CentOS 7 Important All commands should be executed in the same Terminal. The \"export PATH=...\" (for CMake and Git), and \"scl enable devtoolset-7 bash\" (for GCC) are temporary changes which only affect the current Terminal session. Install Dependencies Download CMake. CMake 3.10.2 is recommended and can be downloaded from here . Other CMake binary versions are available here . ./cmake-3.10.2-Linux-x86_64.sh export PATH = /home/user/Downloads/cmake-3.10.2-Linux-x86_64/bin: $PATH Update GCC toolchain. sudo yum install centos-release-scl sudo yum install devtoolset-7 scl enable devtoolset-7 bash Build Git source control system. sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-develperl-CPAN perl-devel git clone https://github.com/git/git.git make configure make export PATH = /home/user/Downloads/git: $PATH Build VCPKG and C++ REST SDK In the rpc directory, clone the VCPKG repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .11-1 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command. ./bootstrap-vcpkg.sh Install C++ REST SDK. This can take anywhere from 8 - 15 minutes depending on download speeds and installation times. ./vcpkg install cpprestsdk [ websockets ] Build RPC Return to the rpc directory and create a new 'build' directory. cd .. && mkdir build && cd build Generate the CMake config cmake -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE = Release -DNO_SELECT = ON .. Note RPC can also be built in a non-production debug mode rather than release using the following command. The debug mode includes debug symbols. cmake -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug -DNO_SELECT=ON .. Build the RPC executable cmake --build .","title":"Install Prerequisites and Build RPC"},{"location":"Microservices/RPC/buildRPC_Manual/#run-rpc","text":"For additional information on possible arguments when invoking RPC, see Command Examples . The following example command shows how to activate and configure an Intel AMT device using a pre-defined profile on your local network. Windows rpc --url wss://localhost:8080 --nocertcheck --cmd \"-t activate --profile profile1\" Note On a Windows\u00ae 10 system, the Command Prompt must be ran as Adminstrator. Linux sudo ./rpc --url wss://localhost:8080 --nocertcheck --cmd \"-t activate --profile profile1\" Note The --nocertcheck flag allows for the use of self-signed certificates for development purposes. Find more information here Example Success Output:","title":"Run RPC"},{"location":"Microservices/RPC/commandsRPC/","text":"RPC is primarily used for communicating with the Remote Provision Server (RPS) for activating and/or deactivating AMT devices. Optional arguments allow for things such as easier development testing or for use in network environments utilizing proxies. All currently available arguments and their definitions are listed below along with example commands. RPC Usage \u00b6 On Windows: rpc <required> [ optional ] rpc <informational> On Linux: sudo ./rpc <required> [ optional ] sudo ./rpc <informational> On Docker: sudo docker run --device = /dev/mei0 rpc:latest <required> [ optional ] sudo docker run --device = /dev/mei0 rpc:latest <informational> RPC Arguments \u00b6 Required \u00b6 Argument\u2003\u2003\u2003\u2003\u2003\u2003 Name \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Description -c, --cmd <command> Server Command Activate or Deactivate command for AMT device. See example commands below. -u, --url <url> Websocket Server Address and Port of the RPS server, wss://localhost:8080. By default, RPS runs on port 8080. Examples \u00b6 Activate a Device: rpc --url wss://localhost:8080 --cmd \"-t activate --profile profile1\" Deactivate a Device: rpc -u wss://localhost:8080 -c \"-t deactivate --password P@ssw0rd\" Note The --password nested argument uses the AMT password set at the time of provisioning of the device based on the RPS Profile. This password should be able to be retrieved from Vault, if unknown. Optional \u00b6 Argument\u2003\u2003\u2003\u2003 Name\u2003\u2003\u2003\u2003\u2003\u2003 Description -d, --dns <dns> DNS Suffix Override -n, --nocertcheck Certificate Verification Disable certificate verification. Allows for the use of self-signed certificates during development testing. Not valid for production. Otherwise, a TLS Certificate from a trusted Certificate Authority provider is required. -p, --proxy <addr> Proxy Address and Port Allow for connection through a network proxy, http://proxy.com:1000 -v, --verbose Verbose Output Display WSMan communication with RPS when executing RPC Examples \u00b6 Override DNS detection and Activate device: rpc --url wss://localhost:8080 --cmd \"-t activate --profile profile1\" --dns corp.com Connect through proxy and Deactivate device: rpc -u wss://localhost:8080 -c \"-t deactivate --password P@ssw0rd\" -p http://proxy.com:1000 Informational \u00b6 Argument Name Description --help Help text Display help menu in-line --version Version Current version of RPC --amtinfo <item> AMT info View available information Possible <item> Parameters: all - View all items ver - BIOS version bld - Build number sku - Product SKU uuid - Device's Unique Identifier mode - Current Control Mode, ACM or CCM dns - Domain Name Suffix from AMT and from OS fqdn - Fully aualified domain name and device hostname from OS cert - Certificate hashes ras - Remote access status lan - LAN settings, i.e. DHCP Enabled, Link Status, and IP/MAC Addresses Examples \u00b6 View All Information Items: rpc --amtinfo all Find Current Device's GUID: rpc --amtinfo uuid","title":"Command Examples"},{"location":"Microservices/RPC/commandsRPC/#rpc-usage","text":"On Windows: rpc <required> [ optional ] rpc <informational> On Linux: sudo ./rpc <required> [ optional ] sudo ./rpc <informational> On Docker: sudo docker run --device = /dev/mei0 rpc:latest <required> [ optional ] sudo docker run --device = /dev/mei0 rpc:latest <informational>","title":"RPC Usage"},{"location":"Microservices/RPC/commandsRPC/#rpc-arguments","text":"","title":"RPC Arguments"},{"location":"Microservices/RPC/commandsRPC/#required","text":"Argument\u2003\u2003\u2003\u2003\u2003\u2003 Name \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Description -c, --cmd <command> Server Command Activate or Deactivate command for AMT device. See example commands below. -u, --url <url> Websocket Server Address and Port of the RPS server, wss://localhost:8080. By default, RPS runs on port 8080.","title":"Required"},{"location":"Microservices/RPC/commandsRPC/#examples","text":"Activate a Device: rpc --url wss://localhost:8080 --cmd \"-t activate --profile profile1\" Deactivate a Device: rpc -u wss://localhost:8080 -c \"-t deactivate --password P@ssw0rd\" Note The --password nested argument uses the AMT password set at the time of provisioning of the device based on the RPS Profile. This password should be able to be retrieved from Vault, if unknown.","title":"Examples"},{"location":"Microservices/RPC/commandsRPC/#optional","text":"Argument\u2003\u2003\u2003\u2003 Name\u2003\u2003\u2003\u2003\u2003\u2003 Description -d, --dns <dns> DNS Suffix Override -n, --nocertcheck Certificate Verification Disable certificate verification. Allows for the use of self-signed certificates during development testing. Not valid for production. Otherwise, a TLS Certificate from a trusted Certificate Authority provider is required. -p, --proxy <addr> Proxy Address and Port Allow for connection through a network proxy, http://proxy.com:1000 -v, --verbose Verbose Output Display WSMan communication with RPS when executing RPC","title":"Optional "},{"location":"Microservices/RPC/commandsRPC/#examples_1","text":"Override DNS detection and Activate device: rpc --url wss://localhost:8080 --cmd \"-t activate --profile profile1\" --dns corp.com Connect through proxy and Deactivate device: rpc -u wss://localhost:8080 -c \"-t deactivate --password P@ssw0rd\" -p http://proxy.com:1000","title":"Examples"},{"location":"Microservices/RPC/commandsRPC/#informational","text":"Argument Name Description --help Help text Display help menu in-line --version Version Current version of RPC --amtinfo <item> AMT info View available information Possible <item> Parameters: all - View all items ver - BIOS version bld - Build number sku - Product SKU uuid - Device's Unique Identifier mode - Current Control Mode, ACM or CCM dns - Domain Name Suffix from AMT and from OS fqdn - Fully aualified domain name and device hostname from OS cert - Certificate hashes ras - Remote access status lan - LAN settings, i.e. DHCP Enabled, Link Status, and IP/MAC Addresses","title":"Informational"},{"location":"Microservices/RPC/commandsRPC/#examples_2","text":"View All Information Items: rpc --amtinfo all Find Current Device's GUID: rpc --amtinfo uuid","title":"Examples"},{"location":"Microservices/RPC/troubleshootingRPC/","text":"The table below details possible errors that may occur when activating or de-activating managed devices along with some potential solutions. Tip If your device has more than one ethernet port, ensure your ethernet cable is plugged into the port that is connected to vPro. You can double check this by ensuring the link status reports \"up\" when running ./rpc --amtinfo all . If you have network access, but show a link status of \"down\". It is likely the cable is plugged into the wrong port. Error Message Possible Solutions \"Decrypting provisioning certificate failed\" Double check the password is correct on the certificate loaded into the \"domains\" on the UI \"Exception reading from device\" If MPS and RPS are running in Docker, check to ensure Vault has been unsealed. \"Unable to connect to Local Management Service (LMS). Please ensure LMS is running\" Check to ensure no application has bound to port 16992 \"Unable to launch MicroLMS.\" Check that Intel ME is present, MEI Driver installed and run this executable as administrator Check to ensure no application has bound to port 16992 \"Device xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx activation failed. Error while adding the certificates to AMT.\" Unplug the device, from both network and power, let it sit for a while. If that doesn't work, file a github issue Device xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx activation failed. Missing DNS Suffix. Run ./rpc --amtinfo all and ensure there is a DNS suffix. If it is blank, double check your router settings for DHCP. Alternatively, you can override the DNS suffix with --dns mycompany.com Error: amt password DOES NOT match stored version for Device 6c4243ba-334d-11ea-94b5-caba2a773d00 Ensure you have provided the --password flag for the --cmd/-c you are trying to execute, and that it is the password you used when provisioning the device. Unable to connect to websocket server. Please check url. After ensuring you can reach your server. Ensure that the certificate common name on the server matches the FQDN/IP of your host address. Error while activating the AMT in admin mode. Check the logs on the RPS server. The rpc.exe fails to connect. If a device has already been provisioned, unprovision it and then reprovision. To deactivate and reactivate devices, see the Mircoservices section for RPC, Command Examples","title":"Troubleshooting"},{"location":"Microservices/RPS/configuration/","text":"RPS Configuration \u00b6 Environment Variable Default Description RPS_IMAGE rps-microservice:v1 Only used when using docker-compose.yml. Specifies image to use for RPS RPS_USE_VAULT true Whether or not the vault should be used RPS_USE_DB_PROFILES true RPS_NODE_ENV dev Node Environment. Set to PRODUCTION when ready to deploy to production RPS_HTTPS true Specifies whether or not to enable https RPS_DB_HOST rpsdb The Database host address RPS_DB_NAME postgresdb The name of the postgres database to connect to RPS_DB_PORT 5432 RPS_DB_USER postgresadmin Database username to log in to postgres with RPS_DB_PASSWORD admin123 Database password to log in to postgres with RPS_WEBSOCKETTLS true RPS_WEB_PORT 8081 Specifies the Web API port to listen on RPS_WEBSOCKETPORT 8080 Specifies the Websocket port to listen on RPS_XAPIKEY APIKEYFORRPS123! RESTful API Header Key. This header must be present on all RESTful calls made against RPS RPS_VAULT_ADDRESS http://vault:8200 Address of where the vault is hosted RPS_VAULT_TOKEN myroot Token used to access the vault RPS_SECRETS_PATH secret/data/ Specifies the path for where secrets are stored in the vault RPS_CREDENTIALS_PATH ../../../config/credentials.json RPS_AMT_USER admin RPS_WEB_TLS_CERT ../private/mpsserver-cert-public.crt Path to public certificate RPS_WEB_TLS_CERT_KEY ../private/mpsserver-cert-private.key Path to private key RPS_ROOT_CA_CERT ../private/root-cert-public.crt Path to public root cert RPS_USER standalone If RPS is aware of MPS. This is the username used to log into MPS. This should match the value provided for MPS_USER RPS_PASSWORD G@ppm0ym If RPS is aware of MPS. This is the password used to log into MPS. This should match the value provided for MPS_PASSWORD RPS_LOG_LEVEL info Controls the level of logging provided in the service. Options are (in order of increasing detail): error , warn , info , verbose , debug RPS_CORS_ORIGIN http://localhost:3001 The domain/origin that is allowed to make requests against this service RPS_CORS_HEADERS Origin, X-Requested-With, Accept, X-MPS-API-Key,x-rps-api-key, Content-Type, csrf-token, authorization List of accepted HTTP Headers RPS_CORS_METHODS * List of HTTP Methods that are allowed RPS_CORS_ALLOW_CREDENTIALS true Controls whether or not session credentials can be send RPS_DELAY_TIMER 12 Sets the number of seconds to wait after activation but before proceeding with final steps. By default it is set to 12 seconds. During this waiting period, RPS sends heartbeats to RPC to keep the connection alive.","title":"Configuration"},{"location":"Microservices/RPS/configuration/#rps-configuration","text":"Environment Variable Default Description RPS_IMAGE rps-microservice:v1 Only used when using docker-compose.yml. Specifies image to use for RPS RPS_USE_VAULT true Whether or not the vault should be used RPS_USE_DB_PROFILES true RPS_NODE_ENV dev Node Environment. Set to PRODUCTION when ready to deploy to production RPS_HTTPS true Specifies whether or not to enable https RPS_DB_HOST rpsdb The Database host address RPS_DB_NAME postgresdb The name of the postgres database to connect to RPS_DB_PORT 5432 RPS_DB_USER postgresadmin Database username to log in to postgres with RPS_DB_PASSWORD admin123 Database password to log in to postgres with RPS_WEBSOCKETTLS true RPS_WEB_PORT 8081 Specifies the Web API port to listen on RPS_WEBSOCKETPORT 8080 Specifies the Websocket port to listen on RPS_XAPIKEY APIKEYFORRPS123! RESTful API Header Key. This header must be present on all RESTful calls made against RPS RPS_VAULT_ADDRESS http://vault:8200 Address of where the vault is hosted RPS_VAULT_TOKEN myroot Token used to access the vault RPS_SECRETS_PATH secret/data/ Specifies the path for where secrets are stored in the vault RPS_CREDENTIALS_PATH ../../../config/credentials.json RPS_AMT_USER admin RPS_WEB_TLS_CERT ../private/mpsserver-cert-public.crt Path to public certificate RPS_WEB_TLS_CERT_KEY ../private/mpsserver-cert-private.key Path to private key RPS_ROOT_CA_CERT ../private/root-cert-public.crt Path to public root cert RPS_USER standalone If RPS is aware of MPS. This is the username used to log into MPS. This should match the value provided for MPS_USER RPS_PASSWORD G@ppm0ym If RPS is aware of MPS. This is the password used to log into MPS. This should match the value provided for MPS_PASSWORD RPS_LOG_LEVEL info Controls the level of logging provided in the service. Options are (in order of increasing detail): error , warn , info , verbose , debug RPS_CORS_ORIGIN http://localhost:3001 The domain/origin that is allowed to make requests against this service RPS_CORS_HEADERS Origin, X-Requested-With, Accept, X-MPS-API-Key,x-rps-api-key, Content-Type, csrf-token, authorization List of accepted HTTP Headers RPS_CORS_METHODS * List of HTTP Methods that are allowed RPS_CORS_ALLOW_CREDENTIALS true Controls whether or not session credentials can be send RPS_DELAY_TIMER 12 Sets the number of seconds to wait after activation but before proceeding with final steps. By default it is set to 12 seconds. During this waiting period, RPS sends heartbeats to RPC to keep the connection alive.","title":"RPS Configuration"},{"location":"Microservices/RPS/networkConfig/","text":"Network Configuration profiles on the RPS server help to set the desired network on the AMT device. The AMT Ethernet Port Setting is the AMT API used to set the network settings in AMT by the RPS. RPS network profiles currently contain three boolean settings. DHCPEnabled - is a boolean. Indicates whether DHCP is in use. SharedStaticIp - is a boolean. Indicates whether the static host IP is shared with ME. IpSyncEnabled - is a boolean. Indicates whether the IP synchronization between host and ME is enabled. Predefined Profiles \u00b6 RPS currently supports two predefined network configurations, DHCP_Enabled and DHCP_Disabled, with the following settings. DHCP_Enabled Network Config: { \"ProfileName\" : \"dhcp_enabled\" , \"DHCPEnabled\" : true , \"StaticIPShared\" : false , \"IPSyncEnabled\" : true } DHCP_Disabled Network Config: { \"ProfileName\" : \"dhcp_disabled\" , \"DHCPEnabled\" : false , \"StaticIPShared\" : true , \"IPSyncEnabled\" : true } Example Scenarios \u00b6 The following are scenarios depicting the result of RPS attempting to set network settings in comparison to the set Host OS settings. Host OS RPS Network Profile Used Network Settings on Device \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Result Static IP DHCP_Enabled \u2716 DHCP in Use \u2714 Shared Static IP \u2716 IP Sync RPS update the device settings as per the profile. Deletes SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS. Static IP DHCP_Disabled \u2714 DHCP in Use \u2716 Shared Static IP \u2716 IP Sync RPS update the device settings as per the profile. Deletes SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS. Note: Sets the same static IP address as host. Static IP DHCP_Disabled \u2716 DHCP in Use \u2714 Shared Static IP \u2716 IP Sync RPS updates the device settings as per the profile. Note: Sets the same static IP address as host as IP Sync is enabled. DHCP DHCP_Enabled \u2714 DHCP in Use \u2716 Shared Static IP \u2716 IP Sync RPS updates the device settings as per the profile. Deletes SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS. DHCP DHCP_Disabled \u2714 DHCP in Use \u2716 Shared Static IP \u2716 IP Sync RPS updates the device settings as per the profile. Set SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS.","title":"Network Profiles"},{"location":"Microservices/RPS/networkConfig/#predefined-profiles","text":"RPS currently supports two predefined network configurations, DHCP_Enabled and DHCP_Disabled, with the following settings. DHCP_Enabled Network Config: { \"ProfileName\" : \"dhcp_enabled\" , \"DHCPEnabled\" : true , \"StaticIPShared\" : false , \"IPSyncEnabled\" : true } DHCP_Disabled Network Config: { \"ProfileName\" : \"dhcp_disabled\" , \"DHCPEnabled\" : false , \"StaticIPShared\" : true , \"IPSyncEnabled\" : true }","title":"Predefined Profiles"},{"location":"Microservices/RPS/networkConfig/#example-scenarios","text":"The following are scenarios depicting the result of RPS attempting to set network settings in comparison to the set Host OS settings. Host OS RPS Network Profile Used Network Settings on Device \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Result Static IP DHCP_Enabled \u2716 DHCP in Use \u2714 Shared Static IP \u2716 IP Sync RPS update the device settings as per the profile. Deletes SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS. Static IP DHCP_Disabled \u2714 DHCP in Use \u2716 Shared Static IP \u2716 IP Sync RPS update the device settings as per the profile. Deletes SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS. Note: Sets the same static IP address as host. Static IP DHCP_Disabled \u2716 DHCP in Use \u2714 Shared Static IP \u2716 IP Sync RPS updates the device settings as per the profile. Note: Sets the same static IP address as host as IP Sync is enabled. DHCP DHCP_Enabled \u2714 DHCP in Use \u2716 Shared Static IP \u2716 IP Sync RPS updates the device settings as per the profile. Deletes SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS. DHCP DHCP_Disabled \u2714 DHCP in Use \u2716 Shared Static IP \u2716 IP Sync RPS updates the device settings as per the profile. Set SubnetMask, DefaultGateway, IPAddress, PrimaryDNS, and SecondaryDNS.","title":"Example Scenarios"},{"location":"Microservices/RPS/securityRPS/","text":"RPS Security Considerations \u00b6 Remote Provision Service (RPS) is built to be a micro service that plays a component role in a larger set of services that makes up the device management software suite. In this role, RPS uses and creates secrets that are required to be able to successfully activate and use Intel\u00ae AMT. There are five key assets that must be protected: Remote admin password for Intel\u00ae AMT MEBx password for Intel\u00ae AMT Provisioning Certificate for each supported domain Password used to encrypt each Provisioning Certificate Device configuration information sent to Intel\u00ae AMT device In addition to the above assets, there are best practices that are recommended to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets. Security Assets \u00b6 1 Remote Admin Password \u00b6 This password is what is configured in the Intel\u00ae AMT firmware that allows a remote user to remotely control the Intel\u00ae AMT device (power actions, remote desktop, remote terminal, etc). When RPS activates an Intel\u00ae AMT device, it sets this password in the Intel\u00ae AMT firmware. This password can either be statically set or can be randomly generated based on the profile defined by the user. It is highly recommended to use randomly generated passwords as this will make each Intel\u00ae AMT device more secure by using unique passwords per device. In a default docker or Kubernetes deployment, RPS will save the Remote Admin Password to the deployed Vault instance. If Vault is not configured, RPS will not use profiles that specify a randomly generated password. This is to prevent the loss of access to a configured Intel\u00ae AMT device. 2 MEBx Password \u00b6 The Management Engine BIOS Extension (MEBx) password is the password that protects the pre-boot menu option that provides access to Intel\u00ae AMT settings. To use this password a user needs to have physical access to the device. It is highly recommended to change this password from the factory default settings upon receiving a new Intel\u00ae AMT device. A RPS profile provides an option for either specifying a static password that is used for all devices configured with a given profile or a randomly generated password can be assigned uniquely per device. The MEBx password set in each device is saved in Vault. While a randomly generated password is more secure, in this case there is risk that if the Vault database is lost, access to the Intel\u00ae AMT device could be very difficult to recover. It is recommended to use the high availability and backup options provided by the Vault solution to ensure that these secrets are not lost. 3 Provisioning Certificate \u00b6 This certificate is unique per owned domain where RPS needs to provision Intel\u00ae AMT devices. This certificate must be derived from a root certificate whose hash matches one of the trusted provisioning root certificate hashes that is listed in the Intel\u00ae AMT device firmware. Generally, the provisioning certificate is purchased from a trusted certificate authority (VeriSign, GoDaddy, Comodo, etc). The full list of supported CAs based on Intel\u00ae AMT version are listed here . This certificate must contain the leaf certificate, root certificate, and all of the intermediate certificates to form a complete certificate chain. Additionally, the certificate file must also include the private key for the certificate (.pfx format). The leaf certificate for the provisioning certificate must match the domain suffix that the Intel\u00ae AMT device is connected as specified by DHCP option 15 or the Trusted DNS Suffix in the Management Engine BIOS Extensions (MEBx). Matching this is one of the ways in which the Intel\u00ae AMT firmware establishes trust with RPS. The provisioning certificate is provided by the user when defining an Intel\u00ae AMT profile. RPS fetches the Provisioning Certificate from Vault when it is needed to activate an Intel\u00ae AMT device. If users have provisioning certificates, they will need to understand which profile to use when configuring an Intel\u00ae AMT device based on the network to which the device is currently connected. 4 Password used to encrypt Provisioning Certificate \u00b6 This is the password that is used to encrypt the provisioning certificate .pfx file that is discussed above. RPS uses this password to decrypt the provisioning certificate so that it can use the certificate components and the private key to activate Intel\u00ae AMT devices. RPS fetches the password from Vault and will use it when it is needed to decrypt a provisioning certificate. 5 Device configuration information sent to Intel\u00ae AMT device \u00b6 This data is a set of information that Intel\u00ae AMT firmware will use to establish trust and then activate the Intel\u00ae AMT device. Contained in this information is the hashed remote admin password and the MEBx password. It is important to protect this set of information while it is being used by RPS and while in transit to the Intel\u00ae AMT device. Ensuring that a secure (TLS encrypted) WebSocket connection is used when RPS is communicating with the client device will protect this data while in transit. This set of information uses nonces to prevent replay of this data. Best Known Security Methods \u00b6 1 Enable TLS on network connections \u00b6 There are two potential places where TLS should be enable to protect the security assets: * WebSocket connection between RPS and Intel\u00ae AMT client * Database connection between RPS and Vault Encrypting these communication transports will help prevent network based attacks attempting to discover the Remote Admin Password and MEBx Password for the Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections. 2 Secure and isolate execution environment \u00b6 RPS holds the described security assets in memory during execution. In order to protect these assets while in memory of RPS, it is recommended that RPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing this data while in use. 3 Utilize a Hashicorp Vault implementation to store security assets \u00b6 Utilizing Hashicorp Vault to store security assets either created by or used by RPS will greatly increase the security of these assets. Not only does Vault encrypt the data at rest, but it also manages access to the data itself. As the Vault owner, you decide who gets access to the security assets stored there, not RPS.","title":"Security Information"},{"location":"Microservices/RPS/securityRPS/#rps-security-considerations","text":"Remote Provision Service (RPS) is built to be a micro service that plays a component role in a larger set of services that makes up the device management software suite. In this role, RPS uses and creates secrets that are required to be able to successfully activate and use Intel\u00ae AMT. There are five key assets that must be protected: Remote admin password for Intel\u00ae AMT MEBx password for Intel\u00ae AMT Provisioning Certificate for each supported domain Password used to encrypt each Provisioning Certificate Device configuration information sent to Intel\u00ae AMT device In addition to the above assets, there are best practices that are recommended to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets.","title":"RPS Security Considerations"},{"location":"Microservices/RPS/securityRPS/#security-assets","text":"","title":"Security Assets"},{"location":"Microservices/RPS/securityRPS/#1-remote-admin-password","text":"This password is what is configured in the Intel\u00ae AMT firmware that allows a remote user to remotely control the Intel\u00ae AMT device (power actions, remote desktop, remote terminal, etc). When RPS activates an Intel\u00ae AMT device, it sets this password in the Intel\u00ae AMT firmware. This password can either be statically set or can be randomly generated based on the profile defined by the user. It is highly recommended to use randomly generated passwords as this will make each Intel\u00ae AMT device more secure by using unique passwords per device. In a default docker or Kubernetes deployment, RPS will save the Remote Admin Password to the deployed Vault instance. If Vault is not configured, RPS will not use profiles that specify a randomly generated password. This is to prevent the loss of access to a configured Intel\u00ae AMT device.","title":"1 Remote Admin Password"},{"location":"Microservices/RPS/securityRPS/#2-mebx-password","text":"The Management Engine BIOS Extension (MEBx) password is the password that protects the pre-boot menu option that provides access to Intel\u00ae AMT settings. To use this password a user needs to have physical access to the device. It is highly recommended to change this password from the factory default settings upon receiving a new Intel\u00ae AMT device. A RPS profile provides an option for either specifying a static password that is used for all devices configured with a given profile or a randomly generated password can be assigned uniquely per device. The MEBx password set in each device is saved in Vault. While a randomly generated password is more secure, in this case there is risk that if the Vault database is lost, access to the Intel\u00ae AMT device could be very difficult to recover. It is recommended to use the high availability and backup options provided by the Vault solution to ensure that these secrets are not lost.","title":"2 MEBx Password"},{"location":"Microservices/RPS/securityRPS/#3-provisioning-certificate","text":"This certificate is unique per owned domain where RPS needs to provision Intel\u00ae AMT devices. This certificate must be derived from a root certificate whose hash matches one of the trusted provisioning root certificate hashes that is listed in the Intel\u00ae AMT device firmware. Generally, the provisioning certificate is purchased from a trusted certificate authority (VeriSign, GoDaddy, Comodo, etc). The full list of supported CAs based on Intel\u00ae AMT version are listed here . This certificate must contain the leaf certificate, root certificate, and all of the intermediate certificates to form a complete certificate chain. Additionally, the certificate file must also include the private key for the certificate (.pfx format). The leaf certificate for the provisioning certificate must match the domain suffix that the Intel\u00ae AMT device is connected as specified by DHCP option 15 or the Trusted DNS Suffix in the Management Engine BIOS Extensions (MEBx). Matching this is one of the ways in which the Intel\u00ae AMT firmware establishes trust with RPS. The provisioning certificate is provided by the user when defining an Intel\u00ae AMT profile. RPS fetches the Provisioning Certificate from Vault when it is needed to activate an Intel\u00ae AMT device. If users have provisioning certificates, they will need to understand which profile to use when configuring an Intel\u00ae AMT device based on the network to which the device is currently connected.","title":"3 Provisioning Certificate"},{"location":"Microservices/RPS/securityRPS/#4-password-used-to-encrypt-provisioning-certificate","text":"This is the password that is used to encrypt the provisioning certificate .pfx file that is discussed above. RPS uses this password to decrypt the provisioning certificate so that it can use the certificate components and the private key to activate Intel\u00ae AMT devices. RPS fetches the password from Vault and will use it when it is needed to decrypt a provisioning certificate.","title":"4 Password used to encrypt Provisioning Certificate"},{"location":"Microservices/RPS/securityRPS/#5-device-configuration-information-sent-to-intel-amt-device","text":"This data is a set of information that Intel\u00ae AMT firmware will use to establish trust and then activate the Intel\u00ae AMT device. Contained in this information is the hashed remote admin password and the MEBx password. It is important to protect this set of information while it is being used by RPS and while in transit to the Intel\u00ae AMT device. Ensuring that a secure (TLS encrypted) WebSocket connection is used when RPS is communicating with the client device will protect this data while in transit. This set of information uses nonces to prevent replay of this data.","title":"5 Device configuration information sent to Intel&reg; AMT device"},{"location":"Microservices/RPS/securityRPS/#best-known-security-methods","text":"","title":"Best Known Security Methods"},{"location":"Microservices/RPS/securityRPS/#1-enable-tls-on-network-connections","text":"There are two potential places where TLS should be enable to protect the security assets: * WebSocket connection between RPS and Intel\u00ae AMT client * Database connection between RPS and Vault Encrypting these communication transports will help prevent network based attacks attempting to discover the Remote Admin Password and MEBx Password for the Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections.","title":"1 Enable TLS on network connections"},{"location":"Microservices/RPS/securityRPS/#2-secure-and-isolate-execution-environment","text":"RPS holds the described security assets in memory during execution. In order to protect these assets while in memory of RPS, it is recommended that RPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing this data while in use.","title":"2 Secure and isolate execution environment"},{"location":"Microservices/RPS/securityRPS/#3-utilize-a-hashicorp-vault-implementation-to-store-security-assets","text":"Utilizing Hashicorp Vault to store security assets either created by or used by RPS will greatly increase the security of these assets. Not only does Vault encrypt the data at rest, but it also manages access to the data itself. As the Vault owner, you decide who gets access to the security assets stored there, not RPS.","title":"3 Utilize a Hashicorp Vault implementation to store security assets"},{"location":"Topics/guids/","text":"GUIDs in Intel\u00ae AMT \u00b6 Each Intel\u00ae AMT device has a Global Unique Identifier (GUID) assigned to it by default. This GUID will be used as the reference to each device record. Typically, device GUIDs are required to perform power actions and other device-specific manageability features. There are a number of ways to obtain the GUID on the Intel\u00ae AMT device: Sample Web UI of the Open AMT Cloud Toolkit ConnectedDevices API Method Via WebUI \u00b6 Login to your Sample Web UI. Navigate to the Devices tab. Your AMT device's GUID is listed in the 2nd column. Via API Method \u00b6 A device's GUID can also be found via the AllDevices or ConnectedDevices MPS methods. Users can follow the Construct a Rest API Call tutorial on constructing and running the ConnectedDevices method as an example. Example ConnectedDevices Output: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }]","title":"GUIDs in Intel AMT"},{"location":"Topics/guids/#guids-in-intel-amt","text":"Each Intel\u00ae AMT device has a Global Unique Identifier (GUID) assigned to it by default. This GUID will be used as the reference to each device record. Typically, device GUIDs are required to perform power actions and other device-specific manageability features. There are a number of ways to obtain the GUID on the Intel\u00ae AMT device: Sample Web UI of the Open AMT Cloud Toolkit ConnectedDevices API Method","title":"GUIDs in Intel&reg; AMT"},{"location":"Topics/guids/#via-webui","text":"Login to your Sample Web UI. Navigate to the Devices tab. Your AMT device's GUID is listed in the 2nd column.","title":"Via WebUI"},{"location":"Topics/guids/#via-api-method","text":"A device's GUID can also be found via the AllDevices or ConnectedDevices MPS methods. Users can follow the Construct a Rest API Call tutorial on constructing and running the ConnectedDevices method as an example. Example ConnectedDevices Output: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }]","title":"Via API Method"},{"location":"Topics/powerstates/","text":"Actions are specified by number. Use the PowerCapabilities method to return the actions available for a specific device. Use the PowerState method to obtain the current power state. Possible actions are listed in the following table: Action # Resulting Action 2 Power up/on 4 Sleep 5 Power cycle 7 Hibernate 8 Power down/off 10 Reset 12 Soft power down/off 14 Soft reset 100 Power up to BIOS settings 101 Reset to BIOS settings 104 Reset to secure erase 200 Reset to IDE-R floppy disc 201 Power on to IDE-R floppy disc 202 Reset to IDE-R CD-ROM 203 Power on to IDE-R CD-ROM 400 Reset to PXE 401 Power on to PXE Consider the current state of the system when implementing a possible action. For example: Reset to BIOS implies that the current system state is on or powered up. Power up to BIOS implies that current system state is off or powered down. Hibernate implies that the current system state is powered up. If the system is already powered up, choosing to Power Up to BIOS will not have any effect on the system. A better choice is Reset to BIOS.","title":"AMT Power States"},{"location":"Topics/proxies/","text":"Proxies \u00b6 MPS \u00b6 RPS \u00b6 RPC \u00b6","title":"Proxies"},{"location":"Topics/proxies/#proxies","text":"","title":"Proxies"},{"location":"Topics/proxies/#mps","text":"","title":"MPS"},{"location":"Topics/proxies/#rps","text":"","title":"RPS"},{"location":"Topics/proxies/#rpc","text":"","title":"RPC"},{"location":"Topics/staticIP/","text":"Static and Dynamic IP Addresses \u00b6 Create Static IPs and Certificates \u00b6 Open Command Prompt as an Administrator. Change directory to the ..\\scripts\\kubernetes folder within the MPS repository that was downloaded and unzipped. cd [path-to-MPS_MicroService-repo-folder]\\scripts\\kubernetes In this directory, run the following .bat script to create the required IPs and Certificates for MPS and RPS. Provide a new password of your choice for your private keys and save and/or remember it. createipsandcerts.bat [resource-group-name] [aks-cluster-name][your-private-keys-password] Copy and save the outputted MPS Static IP Address, RPS Static IP Address, and Node Resource Group from the script. C:\\quickstart\\mps\\scripts\\kubernetes>\"MPS IP ADDRESS\" 13.87.225.246 C:\\quickstart\\mps\\scripts\\kubernetes>\"RPS IP ADDRESS\" 13.87.226.61 C:\\quickstart\\mps\\scripts\\kubernetes>\"Node Resource Group\" C_matt-rg_matt-aks_westus Creating kubectl secrets with name \"mpscerts\" and keys rootCA_mps.key rootCA_mps.crt mps_cert.key mps_cert.crt secret/mpscerts created Creating kubectl secrets with name \"rpscerts\" and keys rootCA_rps.key rootCA_rps.crt rps_cert.key rps_cert.crt secret/rpscerts created At this point, all of your cert key names are stored in your Kubernetes secret store. When building the stack, we will pull them down.","title":"Static and Dynamic IP Addresses"},{"location":"Topics/staticIP/#static-and-dynamic-ip-addresses","text":"","title":"Static and Dynamic IP Addresses"},{"location":"Topics/staticIP/#create-static-ips-and-certificates","text":"Open Command Prompt as an Administrator. Change directory to the ..\\scripts\\kubernetes folder within the MPS repository that was downloaded and unzipped. cd [path-to-MPS_MicroService-repo-folder]\\scripts\\kubernetes In this directory, run the following .bat script to create the required IPs and Certificates for MPS and RPS. Provide a new password of your choice for your private keys and save and/or remember it. createipsandcerts.bat [resource-group-name] [aks-cluster-name][your-private-keys-password] Copy and save the outputted MPS Static IP Address, RPS Static IP Address, and Node Resource Group from the script. C:\\quickstart\\mps\\scripts\\kubernetes>\"MPS IP ADDRESS\" 13.87.225.246 C:\\quickstart\\mps\\scripts\\kubernetes>\"RPS IP ADDRESS\" 13.87.226.61 C:\\quickstart\\mps\\scripts\\kubernetes>\"Node Resource Group\" C_matt-rg_matt-aks_westus Creating kubectl secrets with name \"mpscerts\" and keys rootCA_mps.key rootCA_mps.crt mps_cert.key mps_cert.crt secret/mpscerts created Creating kubectl secrets with name \"rpscerts\" and keys rootCA_rps.key rootCA_rps.crt rps_cert.key rps_cert.crt secret/rpscerts created At this point, all of your cert key names are stored in your Kubernetes secret store. When building the stack, we will pull them down.","title":"Create Static IPs and Certificates"},{"location":"Topics/MEBX/dnsSuffix/","text":"Manageability Engine BIOS Extensions (MEBX) \u00b6 Intel MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Through this interface, you can provision AMT and customize a variety of settings manually. Set a DNS Suffix through MEBX \u00b6 If DHCP option15 is not set, the following needs to be set manually through MEBX if you want to re-activate the device remotely at a later time. 1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen 3. Enter the AMT password Note If it is the first time entering MEBX and the device has not been provisioned previously, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Remote Setup and Configuration\u2019 5. Select \u2018TLS PKI\u2019 6. Select \u2018PKI DNS Suffix\u2019 7. Provide a DNS suffix name and press enter 8. Press Esc three times to reach the main menu 9. Select \u2018MEBX Exit\u2019, and then press 'y' to confirm the exit","title":"DNS Suffix"},{"location":"Topics/MEBX/dnsSuffix/#manageability-engine-bios-extensions-mebx","text":"Intel MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Through this interface, you can provision AMT and customize a variety of settings manually.","title":"Manageability Engine BIOS Extensions (MEBX)"},{"location":"Topics/MEBX/dnsSuffix/#set-a-dns-suffix-through-mebx","text":"If DHCP option15 is not set, the following needs to be set manually through MEBX if you want to re-activate the device remotely at a later time. 1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen 3. Enter the AMT password Note If it is the first time entering MEBX and the device has not been provisioned previously, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Remote Setup and Configuration\u2019 5. Select \u2018TLS PKI\u2019 6. Select \u2018PKI DNS Suffix\u2019 7. Provide a DNS suffix name and press enter 8. Press Esc three times to reach the main menu 9. Select \u2018MEBX Exit\u2019, and then press 'y' to confirm the exit","title":"Set a DNS Suffix through MEBX"},{"location":"Topics/MEBX/unprovision/","text":"Manageability Engine BIOS Extensions (MEBX) \u00b6 Intel MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Through this interface, you can provision AMT and customize a variety of settings manually. Unprovision an AMT Device Through MEBX \u00b6 1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen 3. Enter the AMT password Note If it is the first time entering MEBX, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Intel AMT configuration\u2019 5. Select \u2018Unconfigure Network access\u2019 6. Select \u2018Full unprovision\u2019, and then press 'y' to continue 7. It takes 30 seconds to a minute to unprovision the device. While it is unprovisioning, the up/down arrow keys will not work.","title":"Unprovisioning"},{"location":"Topics/MEBX/unprovision/#manageability-engine-bios-extensions-mebx","text":"Intel MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Through this interface, you can provision AMT and customize a variety of settings manually.","title":"Manageability Engine BIOS Extensions (MEBX)"},{"location":"Topics/MEBX/unprovision/#unprovision-an-amt-device-through-mebx","text":"1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen 3. Enter the AMT password Note If it is the first time entering MEBX, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Intel AMT configuration\u2019 5. Select \u2018Unconfigure Network access\u2019 6. Select \u2018Full unprovision\u2019, and then press 'y' to continue 7. It takes 30 seconds to a minute to unprovision the device. While it is unprovisioning, the up/down arrow keys will not work.","title":"Unprovision an AMT Device Through MEBX"},{"location":"Tutorials/addDatabase/","text":"RPS has the option to output device configuration information to a database so that other software components with access to this database can lookup and use the AMT credentials stored there. Since there are many database options available, RPS takes a flexible approach that allows a developer to implement a simple module in RPS that will allow RPS to then send data to the database implementation of choice. The following example uses MongoDB as the example database, but the same concepts could be used for other database implementations. Create a file called AmtDeviceMongoDbRepository.ts in the \\RPS_MicroServer\\src\\repositories folder This module will need to implement the MongoDB types from mongodb and ILogger, AMTDeviceDTO, and IAMTDeviceWriter from RPS. Below is an example of how this could be implemented: // we imported all types from mongodb driver, to use in code import { MongoClient , Client , Collection , InsertOneWriteOpResult } from 'mongodb' ; import { ILogger } from '../interfaces/ILogger' ; import { AMTDeviceDTO } from './dto/AmtDeviceDTO' ; import { IAMTDeviceWriter } from './interfaces/IAMTDeviceWriter' ; // that class only can be extended export class AmtDeviceMongoDbRepository implements IAMTDeviceWriter { private collection : Collection ; private client : Client ; private connectionString : string ; private databaseName : string ; private collectionName : string ; private logger : ILogger ; constructor ( logger : ILogger , connectionString : string , databaseName : string , collectionName : string ) { this . connectionString = connectionString ; this . databaseName = databaseName ; this . collectionName = collectionName ; this . logger = logger ; } async connect () { let connection = await MongoClient . connect ( this . connectionString , { useNewUrlParser : true }); let database = connection . db ( this . databaseName ); this . collection = database . collection ( this . collectionName ); } disconnect () { if ( this . client ) { this . client . disconnect (); } } public async insert ( device : AMTDeviceDTO ) : Promise < boolean > { try { if ( ! this . collection ) { await this . connect (); } let result : InsertOneWriteOpResult = await this . collection . insertOne ( device ); return !! result . result . ok ; } catch ( error ) { this . logger . error ( `exception inserting record: ${ JSON . stringify ( error ) } ` ); return false ; } } } Edit the file index.ts in \\RPS_MicroServer\\src\\ and import the implementation of database module. For example: import { AmtDeviceMongoDbRepository } from './repositories/AmtDeviceMongoDbRepository' ; Edit the file index.ts in \\RPS_MicroServer\\src\\ and set the amtDeviceWriter object to an instance of the repository (under configurator.isAMTDeviceWriterEnabled() located in line 35). For example: amtDeviceWriter = new AmtDeviceMongoDbRepository ( Logger ( \"AmtDeviceMongoDbRepository\" ), configurator . DbConfig . connectionString , configurator . DbConfig . databaseName configurator . DbConfig . collectionName ); Edit the file package.json and add \"mongodb\": \"^3.3.12\" under dev dependencies. Edit app.config.dev.json database info DbConfig: Configure the Database \u00b6 The DbConfig section configures how RPS connects to a database, which we're not doing for this exercise. Set DbEnabled to false , if it isn't already. Option Description DbEnabled Set to true to enable database integration. To use GenerateRandomPassword for an Intel\u00ae AMT profile, DbEnabled must be set to true. connectionString Specifies how RPS should connect to the database. If DbEnabled is set to true , this is required. databaseName Specifies the name of the database that RPS should use. If DbEnabled is set to true , this is required. collectionName Specifies the collection in the database that RPS should use. If DbEnabled is set to true , this is required.","title":"addDatabase"},{"location":"Tutorials/addDatabase/#dbconfig-configure-the-database","text":"The DbConfig section configures how RPS connects to a database, which we're not doing for this exercise. Set DbEnabled to false , if it isn't already. Option Description DbEnabled Set to true to enable database integration. To use GenerateRandomPassword for an Intel\u00ae AMT profile, DbEnabled must be set to true. connectionString Specifies how RPS should connect to the database. If DbEnabled is set to true , this is required. databaseName Specifies the name of the database that RPS should use. If DbEnabled is set to true , this is required. collectionName Specifies the collection in the database that RPS should use. If DbEnabled is set to true , this is required.","title":"DbConfig: Configure the Database"},{"location":"Tutorials/addVault/","text":"Install Vault \u00b6 Create a folder in a directory of your choice, and browse to it using a Command Prompt or terminal window (as Administrator, if on Windows). Clone the following Vault-helm repository and install it. git clone https://github.com/hashicorp/vault-helm.git cd vault-helm git checkout v0.2.1 helm install vault . Periodically, check the status of the vault pod until it is in the Running state. Copy and save the Vault Pod's name. Usually, the Vault pod is named 'vault-0'. The Vault Pod's name is shown in the first column of the kubectl get pods command. kubectl get pods An example of the pod status is below: NAME READY STATUS RESTARTS AGE vault-0 0/1 Running 0 114s Initialize the vault using the following command: kubectl exec -it [vault-pod-name] -- vault operator init -n 1 -t 1 On completion, the output will display the Unseal Key and Initial Root Token. Copy and save both values for future use. These values will be used to unseal and enable the Vault as well as create the necessary secrets. Unseal Key 1: MG+pLyiasq11B/o7hEbctkrTIpGaVDqja3SWJzSLgs0= Initial Root Token: s.Wvxni2SudRB0R91fLOaGFS6h Vault initialized with 1 key shares and a key threshold of 1. Please securely distribute the key shares printed above. When the Vault is re-sealed, restarted, or stopped, you must supply at least 1 of these keys to unseal it before it can start servicing requests. Unseal Vault \u00b6 Unseal the Vault using your Unseal Key 1 in your Command Prompt or terminal window. kubectl exec -it [vault-pod-name] -- vault operator unseal [unseal-key-1-from-init-command] Example Output: Key Value --- ----- Seal Type shamir Initialized true Sealed false Total Shares 1 Threshold 1 Version 1.2.4 Cluster Name vault-cluster-9a51d062 Cluster ID 3a25afe3-ad48-e8bf-1afa-c924f046c746 HA Enabled false Enable Vault at a Path \u00b6 For this example, we are going to use a key/value secrets engine. Enable it using the following commands: Log in to Vault using your initial root token from initializing Vault in Step 3.i.5 kubectl exec -it [vault-pod-name] -- vault login [your-initial-root-token] Then, enable the 'kv' secrets engine. kubectl exec -it [vault-pod-name] -- vault secrets enable -version=2 kv","title":"addVault"},{"location":"Tutorials/addVault/#install-vault","text":"Create a folder in a directory of your choice, and browse to it using a Command Prompt or terminal window (as Administrator, if on Windows). Clone the following Vault-helm repository and install it. git clone https://github.com/hashicorp/vault-helm.git cd vault-helm git checkout v0.2.1 helm install vault . Periodically, check the status of the vault pod until it is in the Running state. Copy and save the Vault Pod's name. Usually, the Vault pod is named 'vault-0'. The Vault Pod's name is shown in the first column of the kubectl get pods command. kubectl get pods An example of the pod status is below: NAME READY STATUS RESTARTS AGE vault-0 0/1 Running 0 114s Initialize the vault using the following command: kubectl exec -it [vault-pod-name] -- vault operator init -n 1 -t 1 On completion, the output will display the Unseal Key and Initial Root Token. Copy and save both values for future use. These values will be used to unseal and enable the Vault as well as create the necessary secrets. Unseal Key 1: MG+pLyiasq11B/o7hEbctkrTIpGaVDqja3SWJzSLgs0= Initial Root Token: s.Wvxni2SudRB0R91fLOaGFS6h Vault initialized with 1 key shares and a key threshold of 1. Please securely distribute the key shares printed above. When the Vault is re-sealed, restarted, or stopped, you must supply at least 1 of these keys to unseal it before it can start servicing requests.","title":"Install Vault"},{"location":"Tutorials/addVault/#unseal-vault","text":"Unseal the Vault using your Unseal Key 1 in your Command Prompt or terminal window. kubectl exec -it [vault-pod-name] -- vault operator unseal [unseal-key-1-from-init-command] Example Output: Key Value --- ----- Seal Type shamir Initialized true Sealed false Total Shares 1 Threshold 1 Version 1.2.4 Cluster Name vault-cluster-9a51d062 Cluster ID 3a25afe3-ad48-e8bf-1afa-c924f046c746 HA Enabled false","title":"Unseal Vault"},{"location":"Tutorials/addVault/#enable-vault-at-a-path","text":"For this example, we are going to use a key/value secrets engine. Enable it using the following commands: Log in to Vault using your initial root token from initializing Vault in Step 3.i.5 kubectl exec -it [vault-pod-name] -- vault login [your-initial-root-token] Then, enable the 'kv' secrets engine. kubectl exec -it [vault-pod-name] -- vault secrets enable -version=2 kv","title":"Enable Vault at a Path"},{"location":"Tutorials/allowlist/","text":"Add/Modify data.json \u00b6 If use_allowlist is set to true in the .mpsrc file within the mps directory, edit the data.json file in the private directory to allowlist Intel\u00ae AMT GUIDs to connect to MPS. For information on how to obtain GUIDs, see GUIDs in Intel\u00ae AMT . Navigate to the /mps/private directory. Open the data.json file in a text editor of choice. Append the allowlist_guids section to include the GUIDs of your allowed AMT devices. Example Example data.json file: { \"credentials\" : { \"12345678-9abc-def1-2345-123456789000\" : { \"name\" : \"Sample-Device\" , \"mpsuser\" : \"standalone\" , \"mpspass\" : \"G@ppm0ym\" , \"amtuser\" : \"admin\" , \"amtpass\" : \"P@ssw0rd\" }, \"d92b3be1-b04f-49de-b806-54b203054e9d\" : { \"name\" : \"d92b3be1-b04f-49de-b806-54b203054e9d\" , \"mpsuser\" : \"standalone\" , \"mpspass\" : \"G@ppm0ym\" , \"amtuser\" : \"admin\" , \"amtpass\" : \"P@ssw0rd\" , \"mebxpass\" : \"P@ssw0rd\" }, \"3beae094-34f8-11ea-b6f5-ffed08129200\" : { \"name\" : \"3beae094-34f8-11ea-b6f5-ffed08129200\" , \"mpsuser\" : \"standalone\" , \"mpspass\" : \"G@ppm0ym\" , \"amtuser\" : \"admin\" , \"amtpass\" : \"P@ssw0rd\" , \"mebxpass\" : \"P@ssw0rd\" } }, \"allowlist_guids\" : [ \"12345678-9abc-def1-2345-123456789000\" , \"d92b3be1-b04f-49de-b806-54b203054e9d\" , \"3beae094-34f8-11ea-b6f5-ffed08129200\" ], \"allowlist_orgs\" : [ \"12345678901234567890123456789012\" ] }","title":"Allowlists"},{"location":"Tutorials/allowlist/#addmodify-datajson","text":"If use_allowlist is set to true in the .mpsrc file within the mps directory, edit the data.json file in the private directory to allowlist Intel\u00ae AMT GUIDs to connect to MPS. For information on how to obtain GUIDs, see GUIDs in Intel\u00ae AMT . Navigate to the /mps/private directory. Open the data.json file in a text editor of choice. Append the allowlist_guids section to include the GUIDs of your allowed AMT devices. Example Example data.json file: { \"credentials\" : { \"12345678-9abc-def1-2345-123456789000\" : { \"name\" : \"Sample-Device\" , \"mpsuser\" : \"standalone\" , \"mpspass\" : \"G@ppm0ym\" , \"amtuser\" : \"admin\" , \"amtpass\" : \"P@ssw0rd\" }, \"d92b3be1-b04f-49de-b806-54b203054e9d\" : { \"name\" : \"d92b3be1-b04f-49de-b806-54b203054e9d\" , \"mpsuser\" : \"standalone\" , \"mpspass\" : \"G@ppm0ym\" , \"amtuser\" : \"admin\" , \"amtpass\" : \"P@ssw0rd\" , \"mebxpass\" : \"P@ssw0rd\" }, \"3beae094-34f8-11ea-b6f5-ffed08129200\" : { \"name\" : \"3beae094-34f8-11ea-b6f5-ffed08129200\" , \"mpsuser\" : \"standalone\" , \"mpspass\" : \"G@ppm0ym\" , \"amtuser\" : \"admin\" , \"amtpass\" : \"P@ssw0rd\" , \"mebxpass\" : \"P@ssw0rd\" } }, \"allowlist_guids\" : [ \"12345678-9abc-def1-2345-123456789000\" , \"d92b3be1-b04f-49de-b806-54b203054e9d\" , \"3beae094-34f8-11ea-b6f5-ffed08129200\" ], \"allowlist_orgs\" : [ \"12345678901234567890123456789012\" ] }","title":"Add/Modify data.json"},{"location":"Tutorials/apiTutorial/","text":"This tutorial demonstrates how to construct an Admin method API call for ConnectedDevices using Node.js. The ConnectedDevices method will retrieve information about connected devices, including device GUIDs. Figure 1: Admin Method API Call for Connected Devices Important Successfully deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) and connect an Intel\u00ae vPro device to MPS before constructing the API call. Start here to install microservices locally or here to install microservices locally with Docker*. Modify the tutorial template to implement other MPS REST APIs by changing these values: method payload path View all available MPS methods here . What You'll Need \u00b6 Hardware A minimum network configuration must include: A Development system with Windows\u00ae 10 or Ubuntu 18.04 or newer An Activated and Configured Intel\u00ae vPro device as the managed device Software on the Development System MPS RPS Node.js LTS 12.x.x or newer Visual Studio Code or any other IDE What You'll Do \u00b6 The following sections describe how to: Construct an Admin API Call to MPS for connected devices View Device GUIDs Construct an Admin Method API Call for Connected Devices \u00b6 Navigate to a file directory of your choice. Create and open a new JavaScript file with a name of your choice. In this guide we will refer to it as SampleAPI.js*. Copy and paste the example code below. Replace MPS-Server-IP-Address with the IP Address of your development system or MPS server. Note The ConnectedDevices method uses the admin path. MPS methods use either admin or amt as the path. View the difference and all MPS methods here . Security Information By running MPS in Dev Mode, authentication is disabled for testing and demonstration purposes. In production, the MPS certificate needs to be signed by a Certificate Authority. Also, an API Key value must be given in the headers of the API request. Example Example SampleAPI.js file: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end () Execute the REST API \u00b6 Open a Command Prompt or Terminal to execute the call. Navigate to the directory you saved the SampleAPI.js file. Run the code snippet using node. node SampleAPI.js Example Response: Important This is one way to retrieve a device's GUID in the host field. For amt path methods (i.e. Power Actions, Audit Logs, etc), the device GUID is required as part of the POST data. Save this value if you want to try other MPS methods. Other ways to retrieve a GUID can be found here . Example Example Command Prompt Output: respo nse : [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" } ] Example JSON Pretty Print: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }] Construct Other MPS Methods \u00b6 To adapt the above code snippet to work with a different MPS method of your choice, follow the below steps. Select a method from the MPS API Documentation Update the method field in postData with the name of the method. Copy and paste the payload if the method requires it. If necessary, replace the guid field inside the payload with the AMT device's GUID. Update the path field to either /admin or /amt Save and run the Javascript file. Example Highlighted fields should be updated: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end () Other Methods \u00b6 The sample Node code snippet can be adapted for other MPS and RPS methods. To learn more, see: MPS Methods to manage a device . RPS Methods for server configuration and provisioning . Explore the UI Toolkit \u00b6 In addition to REST API calls, the Open AMT Cloud Toolkit provides a reference implementation console. Add manageability features to the console with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit","title":"REST API Call"},{"location":"Tutorials/apiTutorial/#what-youll-need","text":"Hardware A minimum network configuration must include: A Development system with Windows\u00ae 10 or Ubuntu 18.04 or newer An Activated and Configured Intel\u00ae vPro device as the managed device Software on the Development System MPS RPS Node.js LTS 12.x.x or newer Visual Studio Code or any other IDE","title":"What You'll Need"},{"location":"Tutorials/apiTutorial/#what-youll-do","text":"The following sections describe how to: Construct an Admin API Call to MPS for connected devices View Device GUIDs","title":"What You'll Do"},{"location":"Tutorials/apiTutorial/#construct-an-admin-method-api-call-for-connected-devices","text":"Navigate to a file directory of your choice. Create and open a new JavaScript file with a name of your choice. In this guide we will refer to it as SampleAPI.js*. Copy and paste the example code below. Replace MPS-Server-IP-Address with the IP Address of your development system or MPS server. Note The ConnectedDevices method uses the admin path. MPS methods use either admin or amt as the path. View the difference and all MPS methods here . Security Information By running MPS in Dev Mode, authentication is disabled for testing and demonstration purposes. In production, the MPS certificate needs to be signed by a Certificate Authority. Also, an API Key value must be given in the headers of the API request. Example Example SampleAPI.js file: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end ()","title":"Construct an Admin Method API Call for Connected Devices"},{"location":"Tutorials/apiTutorial/#execute-the-rest-api","text":"Open a Command Prompt or Terminal to execute the call. Navigate to the directory you saved the SampleAPI.js file. Run the code snippet using node. node SampleAPI.js Example Response: Important This is one way to retrieve a device's GUID in the host field. For amt path methods (i.e. Power Actions, Audit Logs, etc), the device GUID is required as part of the POST data. Save this value if you want to try other MPS methods. Other ways to retrieve a GUID can be found here . Example Example Command Prompt Output: respo nse : [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" } ] Example JSON Pretty Print: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }]","title":"Execute the REST API"},{"location":"Tutorials/apiTutorial/#construct-other-mps-methods","text":"To adapt the above code snippet to work with a different MPS method of your choice, follow the below steps. Select a method from the MPS API Documentation Update the method field in postData with the name of the method. Copy and paste the payload if the method requires it. If necessary, replace the guid field inside the payload with the AMT device's GUID. Update the path field to either /admin or /amt Save and run the Javascript file. Example Highlighted fields should be updated: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end ()","title":"Construct Other MPS Methods"},{"location":"Tutorials/apiTutorial/#other-methods","text":"The sample Node code snippet can be adapted for other MPS and RPS methods. To learn more, see: MPS Methods to manage a device . RPS Methods for server configuration and provisioning .","title":"Other Methods"},{"location":"Tutorials/apiTutorial/#explore-the-ui-toolkit","text":"In addition to REST API calls, the Open AMT Cloud Toolkit provides a reference implementation console. Add manageability features to the console with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit","title":"Explore the UI Toolkit"},{"location":"Tutorials/uitoolkit/","text":"Add MPS UI Toolkit Controls to a WebUI \u00b6 The UI Toolkit allows developers to add manageability features to a console with prebuilt React components. The code snippets simplify the task of adding complex manageability UI controls, such as the Keyboard, Video, Mouse (KVM). A sample web application, based on React.js, is provided for test and development. The tutorial outlines how to add various controls to the sample React web application provided. Developers can use the sample code below as a springboard for developing their own consoles. What You'll Need \u00b6 Hardware \u00b6 At minimum, to install and utilize the Open AMT Cloud Toolkit microservices, a network configuration must include: A development system with Windows 10 or Ubuntu 18.04 or newer At least one Intel\u00ae vPro device Software \u00b6 MPS , the Management Presence Server RPS , the Remote Provisioning Server Intel\u00ae vPro device, configured and connected to MPS Note Instructions on how to set up the MPS and RPS servers to connect a vPro device can be followed in the Local or Local Docker Build and Deploy Guides. The development system requires the following software: git Visual Studio Code or any other IDE Node.js* LTS 12.x.x or newer What You'll Do \u00b6 Follow the steps in these sections sequentially: Create a new React app Add UI controls to the React app Create a New React App \u00b6 The React app can be created in any preferred development directory. The MPS can continue to run while creating and running the app. In a Terminal or Command Prompt, go to your preferred development directory. Run the following commands to create sample React app named my-app . npx create-react-app my-app && cd my-app Add UI Toolkit \u00b6 Run the following command to add the UI Toolkit and install the required dependencies: npm uninstall react react-dom --save npm install git+https://github.com/open-amt-cloud-toolkit/ui-toolkit.git#v1.2.0 react@16.13.1 react-dom@16.13.1 --save Run the following commands to start the web UI locally: npm start By default, React apps run on port 3000 . If port 3000 is already used by the MPS server or any other application, you'll be prompted to use another port. If this happens, enter 'Y'. Success Figure 2: React reports successful deployment. Note It is possible to see the below error after running npm start . This is okay and will be automatically resolved in the next section. Figure 3: React reports failed compilation. Important By default, React launches in your machine's default browser. However for best experience, navigate to the page using a Chromium based web browser. When you make changes, you do not need to stop the application and restart. It will update and refresh automatically as you make code changes. Add a Sample Control \u00b6 The following sections outline how to add controls. To use the code snippets provided, replace what is in the App.js file with the provided code snippet. Refresh the web browser after adding a control if it does not update automatically after a few seconds. Add Keyboard, Video, Mouse (KVM) Redirection \u00b6 The code snippet below adds KVM control to the React application. Open ./my-app/src/App.js in a text editor or IDE of choice, such as Visual Studio Code or Notepad. Delete the current code and replace with the code snippet below. Change the following values: Field Value deviceId Replace the example deviceId value with the GUID of the Intel AMT device activated and connected to your MPS server. Information on obtaining a GUID can be found here . mpsServer Replace the localhost with the IP Address of your Development Device or MPS Server. Default MPS Server port is 3000. import React from \"react\" ; import \"./App.css\" ; import { KVM , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < KVM deviceId = \"038d0240-045c-05f4-7706-980700080009\" //Replace with AMT Device GUID mpsServer = \"localhost:3000/relay\" //Replace 'localhost' with Development System or MPS Server IP Address mouseDebounceTime = \"200\" canvasHeight = \"100%\" canvasWidth = \"100%\" >< /KVM> < /MpsProvider> < /div> ); } export default App ; Save and close the file. If the React app is still open in the browser and hasn't updated, refresh the page. If not already open, open Chrome and navigate to the given URLs from your successful output. By default it is https://localhost:3001 if MPS is running on Port 3000 already. You are now able to remotely control your Intel AMT device. Other controls such as device audit logs or profiles for RPS have example code below to test with. You will see the errors in the following scenarios: Compilation errors if the ui-toolkit was not downloaded and installed to your react app. MPS/RPS server not running, appropriate controls willfail to work. MPS server running and device not connected. If your browser is IE/Edge, there might be compatibility issues. Next Steps \u00b6 Try Other Controls \u00b6 Try out other React controls such as Serial Over LAN or Audit Logs here Customize and Create Bundles \u00b6 Try out creating and customizing React bundles for things such as Serial Over LAN or KVM here License Note \u00b6 If you are distributing the FortAwesome Icons, please provide attribution to the source per the CC-by 4.0 license obligations.","title":"UI Toolkit KVM Module"},{"location":"Tutorials/uitoolkit/#add-mps-ui-toolkit-controls-to-a-webui","text":"The UI Toolkit allows developers to add manageability features to a console with prebuilt React components. The code snippets simplify the task of adding complex manageability UI controls, such as the Keyboard, Video, Mouse (KVM). A sample web application, based on React.js, is provided for test and development. The tutorial outlines how to add various controls to the sample React web application provided. Developers can use the sample code below as a springboard for developing their own consoles.","title":"Add MPS UI Toolkit Controls to a WebUI"},{"location":"Tutorials/uitoolkit/#what-youll-need","text":"","title":"What You'll Need"},{"location":"Tutorials/uitoolkit/#hardware","text":"At minimum, to install and utilize the Open AMT Cloud Toolkit microservices, a network configuration must include: A development system with Windows 10 or Ubuntu 18.04 or newer At least one Intel\u00ae vPro device","title":"Hardware"},{"location":"Tutorials/uitoolkit/#software","text":"MPS , the Management Presence Server RPS , the Remote Provisioning Server Intel\u00ae vPro device, configured and connected to MPS Note Instructions on how to set up the MPS and RPS servers to connect a vPro device can be followed in the Local or Local Docker Build and Deploy Guides. The development system requires the following software: git Visual Studio Code or any other IDE Node.js* LTS 12.x.x or newer","title":"Software"},{"location":"Tutorials/uitoolkit/#what-youll-do","text":"Follow the steps in these sections sequentially: Create a new React app Add UI controls to the React app","title":"What You'll Do"},{"location":"Tutorials/uitoolkit/#create-a-new-react-app","text":"The React app can be created in any preferred development directory. The MPS can continue to run while creating and running the app. In a Terminal or Command Prompt, go to your preferred development directory. Run the following commands to create sample React app named my-app . npx create-react-app my-app && cd my-app","title":"Create a New React App"},{"location":"Tutorials/uitoolkit/#add-ui-toolkit","text":"Run the following command to add the UI Toolkit and install the required dependencies: npm uninstall react react-dom --save npm install git+https://github.com/open-amt-cloud-toolkit/ui-toolkit.git#v1.2.0 react@16.13.1 react-dom@16.13.1 --save Run the following commands to start the web UI locally: npm start By default, React apps run on port 3000 . If port 3000 is already used by the MPS server or any other application, you'll be prompted to use another port. If this happens, enter 'Y'. Success Figure 2: React reports successful deployment. Note It is possible to see the below error after running npm start . This is okay and will be automatically resolved in the next section. Figure 3: React reports failed compilation. Important By default, React launches in your machine's default browser. However for best experience, navigate to the page using a Chromium based web browser. When you make changes, you do not need to stop the application and restart. It will update and refresh automatically as you make code changes.","title":"Add UI Toolkit"},{"location":"Tutorials/uitoolkit/#add-a-sample-control","text":"The following sections outline how to add controls. To use the code snippets provided, replace what is in the App.js file with the provided code snippet. Refresh the web browser after adding a control if it does not update automatically after a few seconds.","title":"Add a Sample Control"},{"location":"Tutorials/uitoolkit/#add-keyboard-video-mouse-kvm-redirection","text":"The code snippet below adds KVM control to the React application. Open ./my-app/src/App.js in a text editor or IDE of choice, such as Visual Studio Code or Notepad. Delete the current code and replace with the code snippet below. Change the following values: Field Value deviceId Replace the example deviceId value with the GUID of the Intel AMT device activated and connected to your MPS server. Information on obtaining a GUID can be found here . mpsServer Replace the localhost with the IP Address of your Development Device or MPS Server. Default MPS Server port is 3000. import React from \"react\" ; import \"./App.css\" ; import { KVM , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < KVM deviceId = \"038d0240-045c-05f4-7706-980700080009\" //Replace with AMT Device GUID mpsServer = \"localhost:3000/relay\" //Replace 'localhost' with Development System or MPS Server IP Address mouseDebounceTime = \"200\" canvasHeight = \"100%\" canvasWidth = \"100%\" >< /KVM> < /MpsProvider> < /div> ); } export default App ; Save and close the file. If the React app is still open in the browser and hasn't updated, refresh the page. If not already open, open Chrome and navigate to the given URLs from your successful output. By default it is https://localhost:3001 if MPS is running on Port 3000 already. You are now able to remotely control your Intel AMT device. Other controls such as device audit logs or profiles for RPS have example code below to test with. You will see the errors in the following scenarios: Compilation errors if the ui-toolkit was not downloaded and installed to your react app. MPS/RPS server not running, appropriate controls willfail to work. MPS server running and device not connected. If your browser is IE/Edge, there might be compatibility issues.","title":"Add Keyboard, Video, Mouse (KVM) Redirection"},{"location":"Tutorials/uitoolkit/#next-steps","text":"","title":"Next Steps"},{"location":"Tutorials/uitoolkit/#try-other-controls","text":"Try out other React controls such as Serial Over LAN or Audit Logs here","title":"Try Other Controls"},{"location":"Tutorials/uitoolkit/#customize-and-create-bundles","text":"Try out creating and customizing React bundles for things such as Serial Over LAN or KVM here","title":"Customize and Create Bundles"},{"location":"Tutorials/uitoolkit/#license-note","text":"If you are distributing the FortAwesome Icons, please provide attribution to the source per the CC-by 4.0 license obligations.","title":"License Note"},{"location":"UIToolkit/Webpack-Configuration/","text":"As stated in the documentation getting started is quite easy, as you only need to understand its core concepts \u2014 Entry, Output, Loaders, and plugins. Entry: \u00b6 The entry point such as /src/index.js which is the default for Webpack 4 is what Webpack will use to start building out/resolving its dependencies. Output: \u00b6 Output: The output property such as ./dist (default for Webpack 4) tells Webpack where to output the bundles it creates and how to name them. Loaders: \u00b6 Since Webpack only understands native Javascript code, these loaders enable it to process different types of imported files and convert them into valid modules when it encounters a specific type of file. Loaders have 2 properties in the configuration file The test property which identifies which file or files should be transformed The use property which indicates which loader can be used to do the transforming Plugins: \u00b6 This allows you to extend Webpack capabilities to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables. You can check out some of the plugins provided by Webpack here. Installing Webpack: \u00b6 install webpack and webpack cli as dev dependencies. npm i webpack webpack-cli -D webpack-dev-server. Configuring Webpack for development environment : \u00b6 Create a Webpack config file webpack.config.dev.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"development\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple } Adding Typescript: \u00b6 Install Typescript\u2019s dependencies. npm i awesome-typescript-loader -D Add Typescript configuration to Webpack: \u00b6 const path = require('path'); module.exports = { .... resolve: { extensions: [\".tsx\", \".ts\", \".js\"] }, module: { rules: [ { test: /\\.tsx?$/, loader: 'awesome-typescript-loader' } ] } } Here we are telling Webpack to: Resolve file extensions with .tsx, .ts and .js All files with the extension .tsx or .ts should be processed by awesome-typescript-loader Add Styles : \u00b6 Install Styles dependencies. npm i style-loader css-loader sass-loader -D update the webpack config file: module.exports = { .... module: { rules: [ ... { test: /\\.(sc|sa|c)ss$/, use: ['style-loader', 'css-loader', 'sass-loader'], } ] } } Adding HTML: \u00b6 we need to use a Webpack plugin html-webpack-plugin which helps simplifies the creation of HTML files to help serve our Webpack bundles. npm i html-webpack-plugin -D. Update the Webpack config file: const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { .... plugins: [ new HtmlWebpackPlugin({ filename: 'device.htm', template: './src/sample/sampleDG.htm', inject: true, chunks: [\"device\"] }), ] } Adding API keys as Environmental variables: \u00b6 Environmental variables can be setup using the DefinePlugin option in webpack. const path = require('path'); const webpack = require('webpack'); module.exports = { ... plugins: [ new webpack.DefinePlugin({ 'process.env': { 'API_KEY_RPS': JSON.stringify('<Provide RPS api key>'), 'API_KEY_MPS': JSON.stringify('<Provide MPS api key>') } }) ] } These environmental variables can be used inside the code as below, const data = { rpsKey: process.env.API_KEY_RPS, mpsKey: process.env.API_KEY_MPS } Development Server: \u00b6 we are going to set up a development server using the webpack-dev-server which will open up a default browser when we do npm start and also provide us with live reloading on the fly. npm i webpack-dev-server --D update Package.json \u00b6 \"scripts\": { \"start\": \"webpack-dev-server --config webpack.config.dev.js\" } Sample usage : 1)open command prompt 2)Run npm start command Configuring Webpack for production enviroment : \u00b6 Create a Webpack config file webpack.config.prod.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"production\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple output: { filename: \"[name].core.min.js\", path: path.resolve(__dirname, \"./dist\") }, .... } update Package.json \u00b6 \"scripts\": { \"build\": \"webpack --config webpack.config.prod.js\", } Sample usage: 1)open command prompt 2)Run npm run build command Configuring Webpack for external enviroment : \u00b6 Create a Webpack config file webpack.config.externals.js in the root of our project folder. Add webpack-node-externals : \u00b6 Install webpack-node-externals dependencies. npm install webpack-node-externals -D webpack-node-externals library creates an externals function that ignores node_modules when bundling in Webpack. const path = require(\"path\"); //No ES6 in webpack config const nodeExternals = require('webpack-node-externals'); module.exports = { .... externals: [nodeExternals()], }; update Package.json \u00b6 \"scripts\": { \"build-ext\": \"webpack --config webpack.config.externals.js\", } Sample usage: 1)open command prompt 2)Run npm run build-ext command","title":"Webpack Configuration"},{"location":"UIToolkit/Webpack-Configuration/#entry","text":"The entry point such as /src/index.js which is the default for Webpack 4 is what Webpack will use to start building out/resolving its dependencies.","title":"Entry:"},{"location":"UIToolkit/Webpack-Configuration/#output","text":"Output: The output property such as ./dist (default for Webpack 4) tells Webpack where to output the bundles it creates and how to name them.","title":"Output:"},{"location":"UIToolkit/Webpack-Configuration/#loaders","text":"Since Webpack only understands native Javascript code, these loaders enable it to process different types of imported files and convert them into valid modules when it encounters a specific type of file. Loaders have 2 properties in the configuration file The test property which identifies which file or files should be transformed The use property which indicates which loader can be used to do the transforming","title":"Loaders:"},{"location":"UIToolkit/Webpack-Configuration/#plugins","text":"This allows you to extend Webpack capabilities to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables. You can check out some of the plugins provided by Webpack here.","title":"Plugins:"},{"location":"UIToolkit/Webpack-Configuration/#installing-webpack","text":"install webpack and webpack cli as dev dependencies. npm i webpack webpack-cli -D webpack-dev-server.","title":"Installing Webpack:"},{"location":"UIToolkit/Webpack-Configuration/#configuring-webpack-for-development-environment","text":"Create a Webpack config file webpack.config.dev.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"development\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple }","title":"Configuring Webpack for development environment :"},{"location":"UIToolkit/Webpack-Configuration/#adding-typescript","text":"Install Typescript\u2019s dependencies. npm i awesome-typescript-loader -D","title":"Adding Typescript:"},{"location":"UIToolkit/Webpack-Configuration/#add-typescript-configuration-to-webpack","text":"const path = require('path'); module.exports = { .... resolve: { extensions: [\".tsx\", \".ts\", \".js\"] }, module: { rules: [ { test: /\\.tsx?$/, loader: 'awesome-typescript-loader' } ] } } Here we are telling Webpack to: Resolve file extensions with .tsx, .ts and .js All files with the extension .tsx or .ts should be processed by awesome-typescript-loader","title":"Add Typescript configuration to Webpack:"},{"location":"UIToolkit/Webpack-Configuration/#add-styles","text":"Install Styles dependencies. npm i style-loader css-loader sass-loader -D update the webpack config file: module.exports = { .... module: { rules: [ ... { test: /\\.(sc|sa|c)ss$/, use: ['style-loader', 'css-loader', 'sass-loader'], } ] } }","title":"Add Styles :"},{"location":"UIToolkit/Webpack-Configuration/#adding-html","text":"we need to use a Webpack plugin html-webpack-plugin which helps simplifies the creation of HTML files to help serve our Webpack bundles. npm i html-webpack-plugin -D. Update the Webpack config file: const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { .... plugins: [ new HtmlWebpackPlugin({ filename: 'device.htm', template: './src/sample/sampleDG.htm', inject: true, chunks: [\"device\"] }), ] }","title":"Adding HTML:"},{"location":"UIToolkit/Webpack-Configuration/#adding-api-keys-as-environmental-variables","text":"Environmental variables can be setup using the DefinePlugin option in webpack. const path = require('path'); const webpack = require('webpack'); module.exports = { ... plugins: [ new webpack.DefinePlugin({ 'process.env': { 'API_KEY_RPS': JSON.stringify('<Provide RPS api key>'), 'API_KEY_MPS': JSON.stringify('<Provide MPS api key>') } }) ] } These environmental variables can be used inside the code as below, const data = { rpsKey: process.env.API_KEY_RPS, mpsKey: process.env.API_KEY_MPS }","title":"Adding API keys as Environmental variables:"},{"location":"UIToolkit/Webpack-Configuration/#development-server","text":"we are going to set up a development server using the webpack-dev-server which will open up a default browser when we do npm start and also provide us with live reloading on the fly. npm i webpack-dev-server --D","title":"Development Server:"},{"location":"UIToolkit/Webpack-Configuration/#update-packagejson","text":"\"scripts\": { \"start\": \"webpack-dev-server --config webpack.config.dev.js\" } Sample usage : 1)open command prompt 2)Run npm start command","title":"update Package.json"},{"location":"UIToolkit/Webpack-Configuration/#configuring-webpack-for-production-enviroment","text":"Create a Webpack config file webpack.config.prod.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"production\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple output: { filename: \"[name].core.min.js\", path: path.resolve(__dirname, \"./dist\") }, .... }","title":"Configuring Webpack for production enviroment :"},{"location":"UIToolkit/Webpack-Configuration/#update-packagejson_1","text":"\"scripts\": { \"build\": \"webpack --config webpack.config.prod.js\", } Sample usage: 1)open command prompt 2)Run npm run build command","title":"update Package.json"},{"location":"UIToolkit/Webpack-Configuration/#configuring-webpack-for-external-enviroment","text":"Create a Webpack config file webpack.config.externals.js in the root of our project folder.","title":"Configuring Webpack for external enviroment :"},{"location":"UIToolkit/Webpack-Configuration/#add-webpack-node-externals","text":"Install webpack-node-externals dependencies. npm install webpack-node-externals -D webpack-node-externals library creates an externals function that ignores node_modules when bundling in Webpack. const path = require(\"path\"); //No ES6 in webpack config const nodeExternals = require('webpack-node-externals'); module.exports = { .... externals: [nodeExternals()], };","title":"Add webpack-node-externals :"},{"location":"UIToolkit/Webpack-Configuration/#update-packagejson_2","text":"\"scripts\": { \"build-ext\": \"webpack --config webpack.config.externals.js\", } Sample usage: 1)open command prompt 2)Run npm run build-ext command","title":"update Package.json"},{"location":"UIToolkit/localization/","text":"Localize Strings \u00b6 Create a new directory in the ui-toolkit/public/locales/ directory. The directory name must match one of the codes listed . Copy the translation.json file in the public/locales/en/ directory to the new language directory. Customize the required fields in the translation.json file. Example To support Kannada language: Create a new directory kn in /public/locales/ Copy translation.json from /locales/en/ to /locales/kn/ directory Update key-values in /kn/translation.json according to Kannada language Open the i18n.ts file in the ui-toolkit directory. Modify the file to import the newly added public/locales/Language/translation.json file and update the 'resources' constant to include the new translation. Example To support Kannada language: Create new import statement as 'translationKN' Edit resources constant to include new translation import translationEN from './public/locales/en/translation.json' import translationKN from './public/locales/kn/translation.json'; const resources = { en: { translations: translationEN }, kn: { translations: translationKN } }; Rebuild and generate a new bundle before testing the changes. Language can be changed in the browser under langauage section of the browser settings. English is the default if no customized translation file provided for the langauage. Get Localized Strings for Web Consoles with Localization Enabled \u00b6 If your web console already has localization enabled, make sure to add the translations of the UI-controls into your web console's translations file.","title":"Localization"},{"location":"UIToolkit/localization/#localize-strings","text":"Create a new directory in the ui-toolkit/public/locales/ directory. The directory name must match one of the codes listed . Copy the translation.json file in the public/locales/en/ directory to the new language directory. Customize the required fields in the translation.json file. Example To support Kannada language: Create a new directory kn in /public/locales/ Copy translation.json from /locales/en/ to /locales/kn/ directory Update key-values in /kn/translation.json according to Kannada language Open the i18n.ts file in the ui-toolkit directory. Modify the file to import the newly added public/locales/Language/translation.json file and update the 'resources' constant to include the new translation. Example To support Kannada language: Create new import statement as 'translationKN' Edit resources constant to include new translation import translationEN from './public/locales/en/translation.json' import translationKN from './public/locales/kn/translation.json'; const resources = { en: { translations: translationEN }, kn: { translations: translationKN } }; Rebuild and generate a new bundle before testing the changes. Language can be changed in the browser under langauage section of the browser settings. English is the default if no customized translation file provided for the langauage.","title":"Localize Strings"},{"location":"UIToolkit/localization/#get-localized-strings-for-web-consoles-with-localization-enabled","text":"If your web console already has localization enabled, make sure to add the translations of the UI-controls into your web console's translations file.","title":"Get Localized Strings for Web Consoles with Localization Enabled"},{"location":"UIToolkit/Bundles/CIRAConfigs/","text":"Quickstart - Bundle CIRA Config Control \u00b6 This document shows how to: Run the CIRA Config control in development enviroment Create a bundle for CIRA Config control Add bundle to a sample HTML file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS and RPS Server with an AMT Device Connected Download and Install UI Toolkit \u00b6 Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install Run in Development Environment \u00b6 To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8082/cira.htm?rpsServer=https://[RPS-Server-IP-Address]:8080 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port. Create Bundle \u00b6 To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing cira.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new cira.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control Add to Sample HTML Page \u00b6 Add the following code snippet to sampleCIRA.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"ciraroot\"></div> <script src=\"../../dist/cira.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleCIRA.htm?rpsServer=https://[RPS-Server-IP-Address]:8080","title":"Cira Configs"},{"location":"UIToolkit/Bundles/CIRAConfigs/#quickstart-bundle-cira-config-control","text":"This document shows how to: Run the CIRA Config control in development enviroment Create a bundle for CIRA Config control Add bundle to a sample HTML file","title":"Quickstart - Bundle CIRA Config Control"},{"location":"UIToolkit/Bundles/CIRAConfigs/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS and RPS Server with an AMT Device Connected","title":"Prerequisites"},{"location":"UIToolkit/Bundles/CIRAConfigs/#download-and-install-ui-toolkit","text":"Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install","title":"Download and Install UI Toolkit"},{"location":"UIToolkit/Bundles/CIRAConfigs/#run-in-development-environment","text":"To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8082/cira.htm?rpsServer=https://[RPS-Server-IP-Address]:8080 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.","title":"Run in Development Environment"},{"location":"UIToolkit/Bundles/CIRAConfigs/#create-bundle","text":"To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing cira.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new cira.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control","title":"Create Bundle"},{"location":"UIToolkit/Bundles/CIRAConfigs/#add-to-sample-html-page","text":"Add the following code snippet to sampleCIRA.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"ciraroot\"></div> <script src=\"../../dist/cira.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleCIRA.htm?rpsServer=https://[RPS-Server-IP-Address]:8080","title":"Add to Sample HTML Page"},{"location":"UIToolkit/Bundles/DeviceGrid/","text":"Quickstart - Bundle Device Grid Control \u00b6 This document shows how to: Run the Device Grid control in development enviroment Create a bundle for Device Grid control Add bundle to a sample HTML file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected Download and Install UI Toolkit \u00b6 Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install Run in Development Environment \u00b6 To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/device.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port. Create Bundle \u00b6 To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing device.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new device.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control Add to Sample HTML Page \u00b6 Add the following code snippet to sampleDG.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"dgroot\"></div> <script src=\"../../dist/device.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleDG.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Device Grid"},{"location":"UIToolkit/Bundles/DeviceGrid/#quickstart-bundle-device-grid-control","text":"This document shows how to: Run the Device Grid control in development enviroment Create a bundle for Device Grid control Add bundle to a sample HTML file","title":"Quickstart - Bundle Device Grid Control"},{"location":"UIToolkit/Bundles/DeviceGrid/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected","title":"Prerequisites"},{"location":"UIToolkit/Bundles/DeviceGrid/#download-and-install-ui-toolkit","text":"Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install","title":"Download and Install UI Toolkit"},{"location":"UIToolkit/Bundles/DeviceGrid/#run-in-development-environment","text":"To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/device.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.","title":"Run in Development Environment"},{"location":"UIToolkit/Bundles/DeviceGrid/#create-bundle","text":"To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing device.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new device.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control","title":"Create Bundle"},{"location":"UIToolkit/Bundles/DeviceGrid/#add-to-sample-html-page","text":"Add the following code snippet to sampleDG.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"dgroot\"></div> <script src=\"../../dist/device.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleDG.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Add to Sample HTML Page"},{"location":"UIToolkit/Bundles/Domains/","text":"Quickstart - Bundle Domain Control \u00b6 This document shows how to: Run the Domain control in development enviroment Create a bundle for Domain control Add bundle to a sample HTML file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS and RPS Server with an AMT Device Connected Download and Install UI Toolkit \u00b6 Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install Run in Development Environment \u00b6 To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8082/domain.htm?rpsServer=https://[RPS-Server-IP-Address]:8080 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port. Create Bundle \u00b6 To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing domain.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new domain.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control Add to Sample HTML Page \u00b6 Add the following code snippet to sampleDomain.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"domainroot\"></div> <script src=\"../../dist/domain.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleDomain.htm?rpsServer=https://[RPS-Server-IP-Address]:8080","title":"Domains"},{"location":"UIToolkit/Bundles/Domains/#quickstart-bundle-domain-control","text":"This document shows how to: Run the Domain control in development enviroment Create a bundle for Domain control Add bundle to a sample HTML file","title":"Quickstart - Bundle Domain Control"},{"location":"UIToolkit/Bundles/Domains/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS and RPS Server with an AMT Device Connected","title":"Prerequisites"},{"location":"UIToolkit/Bundles/Domains/#download-and-install-ui-toolkit","text":"Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install","title":"Download and Install UI Toolkit"},{"location":"UIToolkit/Bundles/Domains/#run-in-development-environment","text":"To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8082/domain.htm?rpsServer=https://[RPS-Server-IP-Address]:8080 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.","title":"Run in Development Environment"},{"location":"UIToolkit/Bundles/Domains/#create-bundle","text":"To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing domain.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new domain.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control","title":"Create Bundle"},{"location":"UIToolkit/Bundles/Domains/#add-to-sample-html-page","text":"Add the following code snippet to sampleDomain.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"domainroot\"></div> <script src=\"../../dist/domain.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleDomain.htm?rpsServer=https://[RPS-Server-IP-Address]:8080","title":"Add to Sample HTML Page"},{"location":"UIToolkit/Bundles/Profiles/","text":"Quickstart - Bundle Domain Control \u00b6 This document shows how to: Run the Domain control in development enviroment Create a bundle for Domain control Add bundle to a sample HTML file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS and RPS Server with an AMT Device Connected Download and Install UI Toolkit \u00b6 Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install Run in Development Environment \u00b6 To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8082/profile.htm?rpsServer=https://[RPS-Server-IP-Address]:8080 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port. Create Bundle \u00b6 To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing profile.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new profile.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control Add to Sample HTML Page \u00b6 Add the following code snippet to sampleProfile.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"profileroot\"></div> <script src=\"../../dist/profile.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleProfile.htm?rpsServer=https://[RPS-Server-IP-Address]:8080","title":"Profiles"},{"location":"UIToolkit/Bundles/Profiles/#quickstart-bundle-domain-control","text":"This document shows how to: Run the Domain control in development enviroment Create a bundle for Domain control Add bundle to a sample HTML file","title":"Quickstart - Bundle Domain Control"},{"location":"UIToolkit/Bundles/Profiles/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS and RPS Server with an AMT Device Connected","title":"Prerequisites"},{"location":"UIToolkit/Bundles/Profiles/#download-and-install-ui-toolkit","text":"Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install","title":"Download and Install UI Toolkit"},{"location":"UIToolkit/Bundles/Profiles/#run-in-development-environment","text":"To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8082/profile.htm?rpsServer=https://[RPS-Server-IP-Address]:8080 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.","title":"Run in Development Environment"},{"location":"UIToolkit/Bundles/Profiles/#create-bundle","text":"To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing profile.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new profile.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control","title":"Create Bundle"},{"location":"UIToolkit/Bundles/Profiles/#add-to-sample-html-page","text":"Add the following code snippet to sampleProfile.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"profileroot\"></div> <script src=\"../../dist/profile.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleProfile.htm?rpsServer=https://[RPS-Server-IP-Address]:8080","title":"Add to Sample HTML Page"},{"location":"UIToolkit/Bundles/SerialOverLAN/","text":"Quickstart - Bundle Serial-Over-Lan Control \u00b6 This document shows how to: Run the SOL control in development enviroment Create a bundle for SOL control Add bundle to a sample HTML file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected Download and Install UI Toolkit \u00b6 Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI-Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install Run in Development Environment \u00b6 To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/sol.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port. Create Bundle \u00b6 To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing sol.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new kvm.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the Serial-Over-LAN control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control Add to Sample HTML Page \u00b6 Add the following code snippet to sampleSOL.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"sol\"></div> <script src=\"../../dist/sol.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleSOL.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Serial Over LAN (SOL)"},{"location":"UIToolkit/Bundles/SerialOverLAN/#quickstart-bundle-serial-over-lan-control","text":"This document shows how to: Run the SOL control in development enviroment Create a bundle for SOL control Add bundle to a sample HTML file","title":"Quickstart  - Bundle Serial-Over-Lan Control"},{"location":"UIToolkit/Bundles/SerialOverLAN/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected","title":"Prerequisites"},{"location":"UIToolkit/Bundles/SerialOverLAN/#download-and-install-ui-toolkit","text":"Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI-Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install","title":"Download and Install UI Toolkit"},{"location":"UIToolkit/Bundles/SerialOverLAN/#run-in-development-environment","text":"To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/sol.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.","title":"Run in Development Environment"},{"location":"UIToolkit/Bundles/SerialOverLAN/#create-bundle","text":"To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing sol.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new kvm.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the Serial-Over-LAN control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control","title":"Create Bundle"},{"location":"UIToolkit/Bundles/SerialOverLAN/#add-to-sample-html-page","text":"Add the following code snippet to sampleSOL.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"sol\"></div> <script src=\"../../dist/sol.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleSOL.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Add to Sample HTML Page"},{"location":"UIToolkit/Bundles/auditLog/","text":"Quickstart - Bundle AuditLog control \u00b6 This document shows how to: Run the Audit Log control in development enviroment Create a bundle for Audit Log control Add bundle to a sample HTML file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected Download and Install UI Toolkit \u00b6 Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install Run in Development Environment \u00b6 To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/auditLog.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port. Create Bundle \u00b6 To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing auditlog.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new auditlog.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control Add to Sample HTML Page \u00b6 Add the following code snippet to sampleAuditLog.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"auditlog\"></div> <script src=\"../../dist/auditlog.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleAuditLog.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Audit Logs"},{"location":"UIToolkit/Bundles/auditLog/#quickstart-bundle-auditlog-control","text":"This document shows how to: Run the Audit Log control in development enviroment Create a bundle for Audit Log control Add bundle to a sample HTML file","title":"Quickstart - Bundle AuditLog control"},{"location":"UIToolkit/Bundles/auditLog/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected","title":"Prerequisites"},{"location":"UIToolkit/Bundles/auditLog/#download-and-install-ui-toolkit","text":"Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install","title":"Download and Install UI Toolkit"},{"location":"UIToolkit/Bundles/auditLog/#run-in-development-environment","text":"To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/auditLog.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.","title":"Run in Development Environment"},{"location":"UIToolkit/Bundles/auditLog/#create-bundle","text":"To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing auditlog.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new auditlog.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control","title":"Create Bundle"},{"location":"UIToolkit/Bundles/auditLog/#add-to-sample-html-page","text":"Add the following code snippet to sampleAuditLog.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"auditlog\"></div> <script src=\"../../dist/auditlog.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleAuditLog.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Add to Sample HTML Page"},{"location":"UIToolkit/Bundles/kvm/","text":"Quickstart - Bundle KVM Control \u00b6 This document shows how to: Run the KVM control in development enviroment Create a bundle for KVM control Add bundle to a sample HTML file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected Download and Install UI Toolkit \u00b6 Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install Run in Development Environment \u00b6 To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/kvm.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port. Create Bundle \u00b6 To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing kvm.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new kvm.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control Add to Sample HTML Page \u00b6 Add the following code snippet to sampleKVM.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"kvm\"></div> <script src=\"../../dist/kvm.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleKVM.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Keyboard, Video, Mouse (KVM)"},{"location":"UIToolkit/Bundles/kvm/#quickstart-bundle-kvm-control","text":"This document shows how to: Run the KVM control in development enviroment Create a bundle for KVM control Add bundle to a sample HTML file","title":"Quickstart - Bundle KVM Control"},{"location":"UIToolkit/Bundles/kvm/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine Git Visual Studio Code or any other IDE Node.js Chrome* Browser MPS Server with an AMT Device Connected","title":"Prerequisites"},{"location":"UIToolkit/Bundles/kvm/#download-and-install-ui-toolkit","text":"Open a Terminal (Linux) or Command Prompt (Windows) and navigate to a directory of your choice for development. Clone the UI Toolkit Repository. git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit#v1.2.0 Change to the ui-toolkit directory. cd ui_toolkit Install the dependencies. npm install","title":"Download and Install UI Toolkit"},{"location":"UIToolkit/Bundles/kvm/#run-in-development-environment","text":"To add and test new changes before bundling the control, use a webpack dev server. Start the server. npm start Open a Chrome* browser and navigate to the following link to see changes. http://localhost:8080/kvm.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 Note By default, the webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port.","title":"Run in Development Environment"},{"location":"UIToolkit/Bundles/kvm/#create-bundle","text":"To bundle, navigate to the ui-toolkit directory in a Terminal (Linux) or Command Prompt (Windows). Remove or rename the existing kvm.core.min.js in the ui-toolkit/dist/ directory before building. Build the bundle. npm run build A new kvm.core.min.js will be created in the ui-toolkit/dist/ directory. Note To bundle the KVM control without node_modules, run the following build command instead. npm run built-ext The bundle generated using the build-ext command can be used in react apps as an independent control","title":"Create Bundle"},{"location":"UIToolkit/Bundles/kvm/#add-to-sample-html-page","text":"Add the following code snippet to sampleKVM.htm in the ui-toolkit/src/sample/ directory using an editor of your choice. <body> <div id=\"kvm\"></div> <script src=\"../../dist/kvm.core.min.js\" crossorigin></script> </body> In a Terminal (Linux) or Command Prompt (Windows), navigate to the ui-toolkit directory. Serve the HTML page. npx serve Open a new Chrome* browser and navigate to the following URL: http://localhost:5000/src/sample/sampleKVM.htm?deviceId=[AMT-Device-GUID]&mpsServer=https://[MPS-Server-IP-Address]:3000 You will see errors in the following scenarios: UI-toolkit was not downloaded and installed into your react app MPS Server is not running MPS Server is running but the device is not connected","title":"Add to Sample HTML Page"},{"location":"UIToolkit/Controls/auditLogControl/","text":"Not sure how to implement? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough on pre-requisites and implementing a React Control using the UI Toolkit. Add Audit Log Control \u00b6 The following code snippet shows how to add Audit Log control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import \"./App.css\" ; import { AuditLog , MpsProvider } from \"ui-toolkit\" ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < AuditLog deviceId = \"038d0240-045c-05f4-7706-980700080009\" //The AMT Device's GUID mpsServer = \"[MPS-Server-IP-Address]:3000\" >< /AuditLog> < /MpsProvider> < /div> ); } export default App ;","title":"Audit Log"},{"location":"UIToolkit/Controls/auditLogControl/#add-audit-log-control","text":"The following code snippet shows how to add Audit Log control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import \"./App.css\" ; import { AuditLog , MpsProvider } from \"ui-toolkit\" ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < AuditLog deviceId = \"038d0240-045c-05f4-7706-980700080009\" //The AMT Device's GUID mpsServer = \"[MPS-Server-IP-Address]:3000\" >< /AuditLog> < /MpsProvider> < /div> ); } export default App ;","title":"Add Audit Log Control"},{"location":"UIToolkit/Controls/ciraConfigControl/","text":"Not sure how to implement? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough on pre-requisites and implementing a React Control using the UI Toolkit. Add CIRA configs Control \u00b6 Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { CiraEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' , mpsKey : '<MPS API key>' }; return ( < div > < RpsProvider data = { data } > < CiraEditor rpsServer = \"https://[RPS-Server-IP-Address]:8081\" mpsServer = \"https://[MPS-Server-IP-Address]:3000\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Cira Config"},{"location":"UIToolkit/Controls/ciraConfigControl/#add-cira-configs-control","text":"Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { CiraEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' , mpsKey : '<MPS API key>' }; return ( < div > < RpsProvider data = { data } > < CiraEditor rpsServer = \"https://[RPS-Server-IP-Address]:8081\" mpsServer = \"https://[MPS-Server-IP-Address]:3000\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Add CIRA configs Control"},{"location":"UIToolkit/Controls/deviceGridControl/","text":"Not sure how to implement? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough on pre-requisites and implementing a React Control using the UI Toolkit. Add Device Grid Control \u00b6 The following code snippet shows how to add Device Grid control to the React application. Open src/App.js , add the following code as show below: Note Change mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { DeviceGrid , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < DeviceGrid mpsServer = \"[MPS-Server-IP-Address]:3000\" >< /DeviceGrid> < /MpsProvider> < /div> ); } export default App ;","title":"Device Grid"},{"location":"UIToolkit/Controls/deviceGridControl/#add-device-grid-control","text":"The following code snippet shows how to add Device Grid control to the React application. Open src/App.js , add the following code as show below: Note Change mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { DeviceGrid , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < DeviceGrid mpsServer = \"[MPS-Server-IP-Address]:3000\" >< /DeviceGrid> < /MpsProvider> < /div> ); } export default App ;","title":"Add Device Grid Control"},{"location":"UIToolkit/Controls/domainControl/","text":"Not sure how to implement? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough on pre-requisites and implementing a React Control using the UI Toolkit. Add Domain Control \u00b6 Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port import React from \"react\" ; import { DomainEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < DomainEditor rpsServer = \"https://[RPS-Server-IP-Address]:8081\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Domain"},{"location":"UIToolkit/Controls/domainControl/#add-domain-control","text":"Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port import React from \"react\" ; import { DomainEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < DomainEditor rpsServer = \"https://[RPS-Server-IP-Address]:8081\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Add Domain Control"},{"location":"UIToolkit/Controls/kvmControl/","text":"Not sure how to implement? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough on pre-requisites and implementing a React Control using the UI Toolkit. Add Keyboard, Video, Mouse (KVM) Control \u00b6 The following code snippet shows how to add KVM control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import \"./App.css\" ; import { KVM , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < KVM deviceId = \"038d0240-045c-05f4-7706-980700080009\" //The AMT Device's GUID mpsServer = \"[MPS-Server-IP-Address]:3000/relay\" mouseDebounceTime = \"200\" canvasHeight = \"100%\" canvasWidth = \"100%\" >< /KVM> < /MpsProvider> < /div> ); } export default App ;","title":"Keyboard, Video, Mouse (KVM)"},{"location":"UIToolkit/Controls/kvmControl/#add-keyboard-video-mouse-kvm-control","text":"The following code snippet shows how to add KVM control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import \"./App.css\" ; import { KVM , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < KVM deviceId = \"038d0240-045c-05f4-7706-980700080009\" //The AMT Device's GUID mpsServer = \"[MPS-Server-IP-Address]:3000/relay\" mouseDebounceTime = \"200\" canvasHeight = \"100%\" canvasWidth = \"100%\" >< /KVM> < /MpsProvider> < /div> ); } export default App ;","title":"Add Keyboard, Video, Mouse (KVM) Control"},{"location":"UIToolkit/Controls/profileControl/","text":"Not sure how to implement? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough on pre-requisites and implementing a React Control using the UI Toolkit. Add Profile Control \u00b6 Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { Profile , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' , mpsKey : '<MPS API key>' }; return ( < div > < RpsProvider data = { data } > < Profile rpsServer = \"https://[RPS-Server-IP-Address]:8081\" mpsServer = \"https://[MPS-Server-IP-Address]:3000\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Profile"},{"location":"UIToolkit/Controls/profileControl/#add-profile-control","text":"Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { Profile , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' , mpsKey : '<MPS API key>' }; return ( < div > < RpsProvider data = { data } > < Profile rpsServer = \"https://[RPS-Server-IP-Address]:8081\" mpsServer = \"https://[MPS-Server-IP-Address]:3000\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Add Profile Control"},{"location":"UIToolkit/Controls/serialOverLANControl/","text":"Not sure how to implement? View the UI Toolkit KVM Module Tutorial for a step-by-step walkthrough on pre-requisites and implementing a React Control using the UI Toolkit. Add Serial Over LAN Control \u00b6 The following code snippet shows how to add Serial Over LAN control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { Sol , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' const App = () => { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < Sol deviceId = \"038d0240-045c-05f4-7706-980700080009\" //The AMT Device's GUID mpsServer = \"[MPS-Server-IP-Address]:3000\" >< /Sol> < /MpsProvider> < /div> ); } export default App ;","title":"Serial Over LAN (SOL)"},{"location":"UIToolkit/Controls/serialOverLANControl/#add-serial-over-lan-control","text":"The following code snippet shows how to add Serial Over LAN control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { Sol , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' const App = () => { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < Sol deviceId = \"038d0240-045c-05f4-7706-980700080009\" //The AMT Device's GUID mpsServer = \"[MPS-Server-IP-Address]:3000\" >< /Sol> < /MpsProvider> < /div> ); } export default App ;","title":"Add Serial Over LAN Control"}]}